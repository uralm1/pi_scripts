.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::FTPServer::DirHandle 3pm"
.TH Net::FTPServer::DirHandle 3pm "2012-11-12" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::FTPServer::DirHandle \- A Net::FTPServer directory handle.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::FTPServer::DirHandle;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$dirh = new Net::FTPServer::DirHandle ($ftps);" 4
.el .IP "\f(CW$dirh\fR = new Net::FTPServer::DirHandle ($ftps);" 4
.IX Item "$dirh = new Net::FTPServer::DirHandle ($ftps);"
Create a new directory handle. The directory handle corresponds to \*(L"/\*(R".
.ie n .IP "$dirh = $dirh\->parent;" 4
.el .IP "\f(CW$dirh\fR = \f(CW$dirh\fR\->parent;" 4
.IX Item "$dirh = $dirh->parent;"
Return the parent directory of the directory \f(CW$dirh\fR. If
the directory is already \*(L"/\*(R", this returns the same directory handle.
.ie n .IP "$rv = $dirh\->is_root;" 4
.el .IP "\f(CW$rv\fR = \f(CW$dirh\fR\->is_root;" 4
.IX Item "$rv = $dirh->is_root;"
Return true if the current directory is the root directory.
.ie n .IP "$handle = $dirh\->get ($filename);" 4
.el .IP "\f(CW$handle\fR = \f(CW$dirh\fR\->get ($filename);" 4
.IX Item "$handle = $dirh->get ($filename);"
Return the file or directory \f(CW$handle\fR corresponding to
the file \f(CW$filename\fR in directory \f(CW$dirh\fR. If there is
no file or subdirectory of that name, then this returns
undef.
.ie n .IP "$ref = $dirh\->list ([$wildcard]);" 4
.el .IP "\f(CW$ref\fR = \f(CW$dirh\fR\->list ([$wildcard]);" 4
.IX Item "$ref = $dirh->list ([$wildcard]);"
Return a list of the contents of directory \f(CW$dirh\fR. The list
returned is a reference to an array of pairs:
.Sp
.Vb 1
\&  [ $filename, $handle ]
.Ve
.Sp
The list returned does \fInot\fR include \*(L".\*(R" or \*(L"..\*(R".
.Sp
The list is sorted into alphabetical order automatically.
.ie n .IP "$ref = $dirh\->_list_status ([$wildcard]);" 4
.el .IP "\f(CW$ref\fR = \f(CW$dirh\fR\->_list_status ([$wildcard]);" 4
.IX Item "$ref = $dirh->_list_status ([$wildcard]);"
Just a dumb wrapper function.  Returns the same thing as
\&\fBlist_status()\fR, but also includes the special directories
\&\*(L".\*(R" and \*(L"..\*(R" if no wildcard is specified.
.ie n .IP "$ref = $dirh\->list_status ([$wildcard]);" 4
.el .IP "\f(CW$ref\fR = \f(CW$dirh\fR\->list_status ([$wildcard]);" 4
.IX Item "$ref = $dirh->list_status ([$wildcard]);"
Return a list of the contents of directory \f(CW$dirh\fR and
status information. The list returned is a reference to
an array of triplets:
.Sp
.Vb 1
\&  [ $filename, $handle, $statusref ]
.Ve
.Sp
where \f(CW$statusref\fR is the tuple returned from the \f(CW\*(C`status\*(C'\fR
method (see Net::FTPServer::Handle).
.Sp
The list returned does \fInot\fR include \*(L".\*(R" or \*(L"..\*(R".
.Sp
The list is sorted into alphabetical order automatically.
.ie n .IP "$rv = $dirh\->delete;" 4
.el .IP "\f(CW$rv\fR = \f(CW$dirh\fR\->delete;" 4
.IX Item "$rv = $dirh->delete;"
Delete the current directory. If the delete command was
successful, then return 0, else if there was an error return \-1.
.Sp
It is normally only possible to delete a directory if it
is empty.
.ie n .IP "$rv = $dirh\->mkdir ($name);" 4
.el .IP "\f(CW$rv\fR = \f(CW$dirh\fR\->mkdir ($name);" 4
.IX Item "$rv = $dirh->mkdir ($name);"
Create a subdirectory called \f(CW$name\fR within the current directory
\&\f(CW$dirh\fR.
.ie n .IP "$file = $dirh\->open ($filename, ""r""|""w""|""a"");" 4
.el .IP "\f(CW$file\fR = \f(CW$dirh\fR\->open ($filename, ``r''|``w''|``a'');" 4
.IX Item "$file = $dirh->open ($filename, r|w|a);"
Open or create a file called \f(CW$filename\fR in the current directory,
opening it for either read, write or append. This function
returns a \f(CW\*(C`IO::File\*(C'\fR handle object.
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Jones (rich@annexia.org).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000 Biblio@Tech Ltd., Unit 2\-3, 50 Carnwath Road,
London, \s-1SW6 3EG, UK\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWNet::FTPServer(3)\fR, \f(CWperl(1)\fR
