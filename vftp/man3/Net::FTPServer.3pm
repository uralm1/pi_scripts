.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::FTPServer 3pm"
.TH Net::FTPServer 3pm "2012-11-29" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::FTPServer \- A secure, extensible and configurable Perl FTP server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  ftpd.sh [\-\-help] [\-d] [\-v] [\-p port] [\-s] [\-S] [\-V] [\-C conf_file]
\&       [\-P pidfile] [\-o option=value]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::FTPServer\*(C'\fR is a secure, extensible and configurable \s-1FTP\s0
server written in Perl.
.PP
Current features include:
.PP
.Vb 10
\& * Authenticated FTP access.
\& * Anonymous FTP access.
\& * Complete implementation of current RFCs.
\& * ASCII or binary type file transfers.
\& * Active or passive mode file transfers.
\& * Run standalone or from inetd(8).
\& * Security features: chroot, resource limits, tainting,
\&   protection against buffer overflows.
\& * IP\-based and/or IP\-less virtual hosts.
\& * Complete access control system.
\& * Anonymous read\-only FTP personality.
\& * Virtual filesystem allows files to be served
\&   from a database.
\& * Directory aliases and CDPATH support.
\& * Extensible command set.
\& * Generate archives on the fly.
.Ve
.SH "INSTALLING AND RUNNING THE SERVER"
.IX Header "INSTALLING AND RUNNING THE SERVER"
A standard \f(CW\*(C`ftpd.conf\*(C'\fR file is supplied with the distribution.
Full documentation for all the possible options which you
may use in this file is contained in this manual page. See
the section \s-1CONFIGURATION\s0 below.
.PP
After doing \f(CW\*(C`make install\*(C'\fR, the standard \f(CW\*(C`ftpd.conf\*(C'\fR file should
have been installed in \f(CW\*(C`/etc/ftpd.conf\*(C'\fR. You will probably need to
edit this file to suit your local configuration.
.PP
Also after doing \f(CW\*(C`make install\*(C'\fR, several start-up scripts will have
been installed in \f(CW\*(C`/usr/sbin/*ftpd.pl\*(C'\fR. (On Debian in \f(CW\*(C`/usr/bin\*(C'\fR or
\&\f(CW\*(C`/usr/local/bin\*(C'\fR). Each start-up script starts the server in a
different configuration: either as a full \s-1FTP\s0 server, or as an
anonymous-only read-only \s-1FTP\s0 server, etc.
.PP
The commonly used scripts are:
.PP
.Vb 2
\& * /usr/sbin/ftpd.pl
\& * /usr/sbin/ro\-ftpd.pl
.Ve
.PP
The first script is for the full \s-1FTP\s0 server.
.PP
These scripts assume that the \f(CW\*(C`perl\*(C'\fR interpreter can be found on the
current \f(CW$PATH\fR. In the rare situation when this is not the case, you
may need to edit these scripts.
.SS "\s-1STANDALONE SERVER\s0"
.IX Subsection "STANDALONE SERVER"
If you have a high load site, you will want to run \f(CW\*(C`Net::FTPServer\*(C'\fR
as a standalone server. To start \f(CW\*(C`Net::FTPServer\*(C'\fR as a standalone
server, do:
.PP
.Vb 1
\&  /usr/sbin/ftpd.pl \-S
.Ve
.PP
You may want to add this to your local start-up files so that
the server starts automatically when you boot the machine.
.PP
To stop the server, do:
.PP
.Vb 1
\&  killall ftpd.pl
.Ve
.PP
(Note: \f(CW\*(C`Azazel\*(C'\fR points out that the above is a Linux-ism. Solaris
administrators may get a nasty shock if they type \f(CW\*(C`killall\*(C'\fR as \f(CW\*(C`root\*(C'\fR!
Just kill the parent \f(CW\*(C`ftpd.pl\*(C'\fR process by hand instead).
.SS "\s-1RUNNING FROM INETD\s0"
.IX Subsection "RUNNING FROM INETD"
Add the following line to \f(CW\*(C`/etc/inetd.conf\*(C'\fR:
.PP
.Vb 1
\&  ftp stream tcp nowait root /usr/sbin/tcpd ftpd.pl
.Ve
.PP
(This assumes that you have the \f(CW\*(C`tcp\-wrappers\*(C'\fR package installed to
provide basic access control through \f(CW\*(C`/etc/hosts.allow\*(C'\fR and
\&\f(CW\*(C`/etc/hosts.deny\*(C'\fR. This access control is in addition to any access
control which you may configure through \f(CW\*(C`/etc/ftpd.conf\*(C'\fR.)
.PP
After editing this file you will need to inform \f(CW\*(C`inetd\*(C'\fR:
.PP
.Vb 1
\&  killall \-HUP inetd
.Ve
.SS "\s-1RUNNING FROM XINETD\s0"
.IX Subsection "RUNNING FROM XINETD"
\&\f(CW\*(C`xinetd\*(C'\fR is a modern alternative to \f(CW\*(C`inetd\*(C'\fR which is supposedly
simpler to configure. In practice, however, it has proven to be quite
difficult to configure services under \f(CW\*(C`xinetd\*(C'\fR (mainly because
\&\f(CW\*(C`xinetd\*(C'\fR gives no diagnostic information when things go wrong). The
following configuration has worked for me:
.PP
Create the file \f(CW\*(C`/etc/xinetd.d/net\-ftpserver\*(C'\fR containing:
.PP
.Vb 10
\& # default: on
\& # description: Net::FTPServer, a secure, \e
\& #              extensible, configurable FTP server.
\& #
\& service ftp
\& {
\&        socket_type             = stream
\&        wait                    = no
\&        user                    = root
\&        server                  = /usr/sbin/ftpd.pl
\&        log_on_success          += DURATION USERID
\&        log_on_failure          += USERID
\&        disable                 = no
\& }
.Ve
.PP
Check any other possible \s-1FTP\s0 server configurations to ensure they
are all disabled (ie. \f(CW\*(C`disable = yes\*(C'\fR in all other files).
.PP
Restart \f(CW\*(C`xinetd\*(C'\fR using:
.PP
.Vb 1
\& /etc/init.d/xinetd restart
.Ve
.SH "COMMAND LINE FLAGS"
.IX Header "COMMAND LINE FLAGS"
.Vb 11
\&  \-\-help           Display help and exit
\&  \-d, \-v           Enable debugging
\&  \-p PORT          Listen on port PORT instead of the default port
\&  \-s               Run in daemon mode (default: run from inetd)
\&  \-S               Run in background and in daemon mode
\&  \-V               Show version information and exit
\&  \-C CONF          Use CONF as configuration file (default:
\&                   /etc/ftpd.conf)
\&  \-P PIDFILE       Save pid into PIDFILE (daemon mode only)
\&  \-o option=value  Override config file option with value
\&  \-\-test           Test mode (used only in automatic testing scripts)
.Ve
.SH "CONFIGURING AND EXTENDING THE SERVER"
.IX Header "CONFIGURING AND EXTENDING THE SERVER"
\&\f(CW\*(C`Net::FTPServer\*(C'\fR can be configured and extended in a number
of different ways.
.PP
Firstly, almost all common server configuration can be carried
out by editing the configuration file \f(CW\*(C`/etc/ftpd.conf\*(C'\fR.
.PP
Secondly, commands can be loaded into the server at run-time
to provide custom extensions to the common \s-1FTP\s0 command set.
These custom commands are written in Perl.
.PP
Thirdly, one of several different supplied \fIpersonalities\fR can be
chosen. Personalities can be used to make deep changes to the \s-1FTP\s0
server: for example, there is a supplied personality which allows the
\&\s-1FTP\s0 server to serve files from a relational database. By subclassing
\&\f(CW\*(C`Net::FTPServer\*(C'\fR, \f(CW\*(C`Net::FTPServer::DirHandle\*(C'\fR and
\&\f(CW\*(C`Net::FTPServer::FileHandle\*(C'\fR you may also write your own
personalities.
.PP
The next sections talk about each of these possibilities in turn.
.SS "\s-1CONFIGURATION\s0"
.IX Subsection "CONFIGURATION"
A standard \f(CW\*(C`/etc/ftpd.conf\*(C'\fR file is supplied with \f(CW\*(C`Net::FTPServer\*(C'\fR
in the distribution. The possible configuration options are listed in
full below.
.PP
Simple configuration options can also be given on the command line
using the \f(CW\*(C`\-o\*(C'\fR option. Command line configuration options override
those from the configuration file.
.IP "<Include filename>" 4
.IX Item "<Include filename>"
Use the <Include filename> directive to include
the contents of \f(CW\*(C`filename\*(C'\fR directly at the current point
within the configuration file.
.Sp
You cannot use <Include> within a <Host>
section, or at least you \fIcan\fR but it won't work the
way you expect.
.IP "<IncludeWildcard wildcard>" 4
.IX Item "<IncludeWildcard wildcard>"
Include all files matching \f(CW\*(C`wildcard\*(C'\fR at this point in
the file. The files are included in alphabetical order.
.Sp
You cannot use <IncludeWildcard> within a <Host>
section, or at least you \fIcan\fR but it won't work the
way you expect.
.IP "debug" 4
.IX Item "debug"
Run with debugging. Equivalent to the command line \f(CW\*(C`\-d\*(C'\fR option.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`debug: 1\*(C'\fR
.IP "port" 4
.IX Item "port"
The \s-1TCP\s0 port number on which the \s-1FTP\s0 server listens when
running in daemon mode (see \f(CW\*(C`daemon mode\*(C'\fR option below).
.Sp
Default: The standard ftp/tcp service port from \f(CW\*(C`/etc/services\*(C'\fR
.Sp
Example: \f(CW\*(C`port: 8021\*(C'\fR
.IP "daemon mode" 4
.IX Item "daemon mode"
Run as a daemon. If set, the \s-1FTP\s0 server will open a listening
socket on its default port number, accept new connections and
fork off a new process to handle each connection. If not set
(the default), the \s-1FTP\s0 server will handle a single connection
on stdin/stdout, which is suitable for use from inetd.
.Sp
The equivalent command line options are \f(CW\*(C`\-s\*(C'\fR and \f(CW\*(C`\-S\*(C'\fR.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`daemon mode: 1\*(C'\fR
.IP "run in background" 4
.IX Item "run in background"
Run in the background. If set, the \s-1FTP\s0 server will fork into
the background before running.
.Sp
The equivalent command line option is \f(CW\*(C`\-S\*(C'\fR.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`run in background: 1\*(C'\fR
.IP "error log" 4
.IX Item "error log"
If set, then all warning and error messages are appended to
this file. If not set, warning and error messages get sent to
\&\s-1STDERR\s0 and to syslog.
.Sp
Having an error log is \fIhighly recommended\fR.
.Sp
Default: (not set, warnings and errors go to syslog)
.Sp
Example: \f(CW\*(C`error log: /var/log/ftpd.errors\*(C'\fR
.IP "rotate log files" 4
.IX Item "rotate log files"
If set, and if the log file names contain a '%' directive, then the
server will check if a new log file is needed whenever the system
accepts a new connection.  This implements a log rotation feature for
long-running servers.
.Sp
If not set, then any '%' directive will be evaluated only when the log
files gets created.
.Sp
Default: (not set, log file name evaluated only once)
.Sp
Example: \f(CW\*(C`rotate log files: 1\*(C'\fR
.IP "maintainer email" 4
.IX Item "maintainer email"
Maintainer's email address.
.Sp
Default: root@\fIhostname\fR
.Sp
Example: \f(CW\*(C`maintainer email: bob@example.com\*(C'\fR
.IP "class" 4
.IX Item "class"
Assign users into classes. One or more \f(CW\*(C`class\*(C'\fR directives can be
added to the configuration file to aggregate individual users into
larger groups of users called classes.
.Sp
By default all anonymous users are in class \f(CW\*(C`anonymous\*(C'\fR and every
other user is in class \f(CW\*(C`users\*(C'\fR.
.Sp
The configuration file can contain zero or more \f(CW\*(C`class\*(C'\fR
directives. The format of the class directive is either:
.Sp
.Vb 1
\& class: CLASSNAME USERNAME[,USERNAME[,...]]
.Ve
.Sp
or:
.Sp
.Vb 1
\& class: CLASSNAME { perl code ... }
.Ve
.Sp
Examples of the first form are:
.Sp
.Vb 2
\& class: staff rich
\& class: students ann,mary,pete
.Ve
.Sp
User \f(CW\*(C`rich\*(C'\fR will be placed into class \f(CW\*(C`staff\*(C'\fR, and users \f(CW\*(C`ann\*(C'\fR,
\&\f(CW\*(C`mary\*(C'\fR and \f(CW\*(C`pete\*(C'\fR will be placed into class \f(CW\*(C`students\*(C'\fR.
.Sp
Examples of the second form are:
.Sp
.Vb 2
\& class: family { /jones$/ }
\& class: friends { $_ ne "jeff" }
.Ve
.Sp
Any username ending in \f(CW\*(C`jones\*(C'\fR (eg. \f(CW\*(C`rjones\*(C'\fR, \f(CW\*(C`timjones\*(C'\fR) will be
in class \f(CW\*(C`family\*(C'\fR. Any other user except \f(CW\*(C`jeff\*(C'\fR will be placed in
class \f(CW\*(C`friends\*(C'\fR. Note that the Perl code must be surrounded by
\&\f(CW\*(C`{...}\*(C'\fR and must return a boolean true or false value. The username
is available as \f(CW$_\fR. The Perl code is arbitrary: it might, for
example, use an external file or database lookup in order to work out
if a user belongs to a class.
.Sp
\&\f(CW\*(C`class\*(C'\fR directives are evaluated in the order in which they appear in
the configuration file until one matches the username.
.Sp
Default: Anonymous users are assigned to class \f(CW\*(C`anonymous\*(C'\fR and
everyone else is assigned to class \f(CW\*(C`users\*(C'\fR.
.IP "timeout" 4
.IX Item "timeout"
Timeout on control connection. If a command has not been
received after this many seconds, the server drops the
connection. You may set this to zero to disable timeouts
completely (although this is not recommended).
.Sp
Default: 900 (seconds)
.Sp
Example: \f(CW\*(C`timeout: 600\*(C'\fR
.IP "limit memory" 4
.IX Item "limit memory"
.PD 0
.IP "limit nr processes" 4
.IX Item "limit nr processes"
.IP "limit nr files" 4
.IX Item "limit nr files"
.PD
Resource limits. These limits are applied to each child
process and are important in avoiding denial of service (DoS)
attacks against the \s-1FTP\s0 server.
.Sp
.Vb 4
\& Resource         Default   Unit
\& limit memory       16384   KBytes  Amount of memory per child
\& limit nr processes    10   (none)  Number of processes
\& limit nr files        20   (none)  Number of open files
.Ve
.Sp
To instruct the server \fInot\fR to limit a particular resource, set the
limit to \f(CW\*(C`\-1\*(C'\fR.
.Sp
Example:
.Sp
.Vb 3
\& limit memory:       32768
\& limit nr processes:    20
\& limit nr files:        40
\&
\& limit nr processes:    \-1
.Ve
.IP "max clients" 4
.IX Item "max clients"
Limit on the number of clients who can simultaneously connect.
If this limit is ever reached, new clients will immediately be
closed.  It will not even ask the client to login.  This
feature works in daemon mode only.
.Sp
Default: 255
.Sp
Example: \f(CW\*(C`max clients: 600\*(C'\fR
.IP "max clients message" 4
.IX Item "max clients message"
Message to display when ``max clients'' has been reached.
.Sp
You may use the following % escape sequences within the
message for internal variables:
.Sp
.Vb 9
\& %x  \`\`max clients\*(Aq\*(Aq setting that has been reached
\& %E  maintainer email address (from \`\`maintainer email\*(Aq\*(Aq
\&     setting above)
\& %G  time in GMT
\& %R  remote hostname or IP address if \`\`resolve addresses\*(Aq\*(Aq
\&     is not set
\& %L  local hostname
\& %T  local time
\& %%  just an ordinary \`\`%\*(Aq\*(Aq
.Ve
.Sp
Default: Maximum connections reached
.Sp
Example: \f(CW\*(C`max clients message: Only %x simultaneous connections allowed.  Please try again later.\*(C'\fR
.IP "resolve addresses" 4
.IX Item "resolve addresses"
Resolve addresses. If set, attempt to do a reverse lookup on
client addresses for logging purposes. If you set this then
some clients may experience long delays when they try to
connect. Not recommended on high load servers.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`resolve addresses: 1\*(C'\fR
.IP "require resolved addresses" 4
.IX Item "require resolved addresses"
Require resolved addresses. If set, client addresses must validly resolve
otherwise clients will not be able to connect. If you set this
then some clients will not be able to connect, even though it is
probably the fault of their \s-1ISP.\s0
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`require resolved addresses: 1\*(C'\fR
.IP "change process name" 4
.IX Item "change process name"
Change process name. If set (the default) then the \s-1FTP\s0 server will
change its process name to reflect the \s-1IP\s0 address or hostname of
the client. If not set then the \s-1FTP\s0 server will not try to change
its process name.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`change process name: 0\*(C'\fR
.IP "greeting type" 4
.IX Item "greeting type"
Greeting type. The greeting is printed before the user has logged in.
Possible greeting types are:
.Sp
.Vb 4
\&    full     Full greeting, including hostname and version number.
\&    brief    Hostname only.
\&    terse    Nothing
\&    text     Display greeting from \`\`greeting text\*(Aq\*(Aq option.
.Ve
.Sp
The \s-1SITE VERSION\s0 command can also reveal the version number. You
may need to turn this off by setting \f(CW\*(C`allow site version command: 0\*(C'\fR
below.
.Sp
Default: full
.Sp
Example: \f(CW\*(C`greeting type: text\*(C'\fR
.IP "greeting text" 4
.IX Item "greeting text"
Greeting text. If the \f(CW\*(C`greeting type\*(C'\fR is set to \f(CW\*(C`text\*(C'\fR then this
contains the text to display.
.Sp
Default: none
.Sp
Example: \f(CW\*(C`greeting text: Hello. I\*(Aqll be your server today.\*(C'\fR
.IP "welcome type" 4
.IX Item "welcome type"
Welcome type. The welcome is printed after a user has logged in.
Possible welcome types are:
.Sp
.Vb 3
\&    normal   Normal welcome message: \`\`Welcome <<username>>.\*(Aq\*(Aq
\&    text     Take the welcome message from \`\`welcome text\*(Aq\*(Aq option.
\&    file     Take the welcome message from \`\`welcome file\*(Aq\*(Aq file.
.Ve
.Sp
Default: normal
.Sp
Example: \f(CW\*(C`welcome type: text\*(C'\fR
.IP "welcome text" 4
.IX Item "welcome text"
If \f(CW\*(C`welcome type\*(C'\fR is set to \f(CW\*(C`text\*(C'\fR, then this contains the text
to be printed after a user has logged in.
.Sp
You may use the following % escape sequences within the welcome
text to substitute for internal variables:
.Sp
.Vb 12
\& %E  maintainer\*(Aqs email address (from \`\`maintainer email\*(Aq\*(Aq
\&     setting above)
\& %G  time in GMT
\& %R  remote hostname or IP address if \`\`resolve addresses\*(Aq\*(Aq
\&     is not set
\& %L  local hostname
\& %m  user\*(Aqs home directory (see \`\`home directory\*(Aq\*(Aq below)
\& %T  local time
\& %U  username given when logging in
\& %u  currently a synonym for %U, but in future will be
\&     determined from RFC931 authentication, like wu\-ftpd
\& %%  just an ordinary \`\`%\*(Aq\*(Aq
.Ve
.Sp
Default: none
.Sp
Example: \f(CW\*(C`welcome text: Welcome to this FTP server.\*(C'\fR
.IP "welcome file" 4
.IX Item "welcome file"
If \f(CW\*(C`welcome type\*(C'\fR is set to \f(CW\*(C`file\*(C'\fR, then this contains the file
to be printed after a user has logged in.
.Sp
You may use any of the % escape sequences defined in \f(CW\*(C`welcome text\*(C'\fR
above.
.Sp
Default: none
.Sp
Example: \f(CW\*(C`welcome file: /etc/motd\*(C'\fR
.IP "home directory" 4
.IX Item "home directory"
Home directory. This is the home directory where we put the
user once they have logged in. This only applies to non-anonymous
logins. Anonymous logins are always placed in \*(L"/\*(R", which is at the
root of their chrooted environment.
.Sp
You may use an absolute path here, or else one of the following
special forms:
.Sp
.Vb 3
\& %m   Use home directory from password file or from NSS.
\& %U   Username.
\& %%   A single % character.
.Ve
.Sp
For example, to force a user to start in \f(CW\*(C`~/anon\-ftp\*(C'\fR when they
log in, set this to \f(CW\*(C`%m/anon\-ftp\*(C'\fR.
.Sp
Note that setting the home directory does not perform a chroot.
Use the \f(CW\*(C`root directory\*(C'\fR setting below to jail users into a
particular directory.
.Sp
Home directories are \fIrelative\fR to the current root directory.
.Sp
In the anonymous read-only (ro-ftpd) personality, set home
directory to \f(CW\*(C`/\*(C'\fR or else you will get a warning whenever a user
logs in.
.Sp
Default: \f(CW%m\fR
.Sp
Examples:
.Sp
.Vb 2
\& home directory: %m/anon\-ftp
\& home directory: /
.Ve
.IP "root directory" 4
.IX Item "root directory"
Root directory. Immediately after logging in, perform a chroot
into the named directory. This only applies to non-anonymous
logins, and furthermore it only applies if you have a non-database
\&\s-1VFS\s0 installed. Database VFSes typically cannot perform chroot
(or, to be more accurate, they have a different concept of
chroot \- typically assigning each user their own completely
separate namespace).
.Sp
You may use \f(CW%m\fR and \f(CW%U\fR as above.
.Sp
For example, to jail a user under \f(CW\*(C`~/anon\-ftp\*(C'\fR after login, do:
.Sp
.Vb 2
\&  home directory: /
\&  root directory: %m/anon\-ftp
.Ve
.Sp
Notice that the home directory is \fIrelative\fR to the current
root directory.
.Sp
Default: (none)
.Sp
Example: \f(CW\*(C`root directory: %m/anon\-ftp\*(C'\fR
.IP "time zone" 4
.IX Item "time zone"
Time zone to be used for \s-1MDTM\s0 and \s-1LIST\s0 stat information.
.Sp
Default: \s-1GMT\s0
.Sp
Examples:
.Sp
.Vb 3
\& time zone: Etc/GMT+3
\& time zone: Europe/London
\& time zone: US/Mountain
.Ve
.IP "local address" 4
.IX Item "local address"
Local addresses. If you wish the \s-1FTP\s0 server (in daemon mode) to
only bind to a particular local interface, then give its address
here.
.Sp
Default: none
.Sp
Example: \f(CW\*(C`local address: 127.0.0.1\*(C'\fR
.IP "allow anonymous" 4
.IX Item "allow anonymous"
Allow anonymous access. If set, then allow anonymous access through
the \f(CW\*(C`ftp\*(C'\fR and \f(CW\*(C`anonymous\*(C'\fR accounts.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`allow anonymous: 1\*(C'\fR
.IP "anonymous password check" 4
.IX Item "anonymous password check"
.PD 0
.IP "anonymous password enforce" 4
.IX Item "anonymous password enforce"
.PD
Validate email addresses. Normally when logging in anonymously,
you are asked to enter your email address as a password. These options
can be used to check and enforce email addresses in this field (to
some extent, at least \*(-- you obviously can't force someone to
enter a true email address).
.Sp
The \f(CW\*(C`anonymous password check\*(C'\fR option may be set to \f(CW\*(C`rfc822\*(C'\fR,
\&\f(CW\*(C`no browser\*(C'\fR, \f(CW\*(C`trivial\*(C'\fR or \f(CW\*(C`none\*(C'\fR. If set to \f(CW\*(C`rfc822\*(C'\fR then
the user must enter a valid \s-1RFC 822\s0 email address as password. If
set to \f(CW\*(C`no browser\*(C'\fR then a valid \s-1RFC 822\s0 email address must be
entered, and various common browser email addresses like
\&\f(CW\*(C`mozilla@\*(C'\fR and \f(CW\*(C`IE\f(CIver\f(CWUser@\*(C'\fR are refused. If set to \f(CW\*(C`trivial\*(C'\fR
then we just check that the address contains an @ char. If set to
\&\f(CW\*(C`none\*(C'\fR, then we do no checking. The default is \f(CW\*(C`none\*(C'\fR.
.Sp
If the \f(CW\*(C`anonymous password enforce\*(C'\fR option is set and the
password fails the check above, then the user will not be allowed
to log in. The default is 0 (unset).
.Sp
These options only have effect when \f(CW\*(C`allow anonymous\*(C'\fR is set.
.Sp
Example:
.Sp
.Vb 2
\& anonymous password check: rfc822
\& anonymous password enforce: 1
.Ve
.IP "allow proxy ftp" 4
.IX Item "allow proxy ftp"
Allow proxy \s-1FTP.\s0 If this is set, then the \s-1FTP\s0 server can be told to
actively connect to addresses and ports on any machine in the world.
This is not such a great idea, but required if you follow the \s-1RFC\s0
very closely. If not set (the default), the \s-1FTP\s0 server will only
connect back to the client machine.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`allow proxy ftp: 1\*(C'\fR
.IP "allow connect low port" 4
.IX Item "allow connect low port"
Allow the \s-1FTP\s0 server to connect back to ports < 1024. This is rarely
useful and could pose a serious security hole in some circumstances.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`allow connect low port: 1\*(C'\fR
.IP "passive port range" 4
.IX Item "passive port range"
What range of local ports will the \s-1FTP\s0 server listen on in passive
mode? Choose a range here like \f(CW\*(C`1024\-5999,49152\-65535\*(C'\fR. The special
value \f(CW0\fR means that the \s-1FTP\s0 server will use a kernel-assigned
ephemeral port.
.Sp
Default: 49152\-65535
.Sp
Example: \f(CW\*(C`passive port range: 0\*(C'\fR
.IP "ftp data port" 4
.IX Item "ftp data port"
Which source port to use for active (non-passive) mode when connecting
to the client for \s-1PORT\s0 mode transfers.  The special value \f(CW0\fR means
that the \s-1FTP\s0 server will use a kernel-assigned ephemeral port.  To
strictly follow \s-1RFC,\s0 this should be set to \f(CW\*(C`ftp\-data(20)\*(C'\fR.  This may
be required for certain brain-damaged firewall configurations.  However,
for security reasons, the default setting is intentionally set to \f(CW0\fR
to utilize a kernel-assigned ephemeral port.  Use this directive at
your own risk!
.Sp
\&\s-1SECURITY PRECAUTIONS:\s0
.Sp
1) Unfortunately, to use a port < 1024 requires super-user
privileges.  Thus, low ports will not work unless the \s-1FTP\s0 server is
invoked as super-user.  This also implies that all processes handling
the client connections must also \fIremain\fR super-user throughout
the entire session.  It is highly discouraged to use a low port.
.Sp
.Vb 2
\& http://cr.yp.to/ftp/security.html
\& (See "Connection laundering" section)
.Ve
.Sp
2) There sometimes exists a danger of needing to connect to the
same remote host:port.  Using the same IP/port on both sides
will cause \fBconnect()\fR to fail if the old socket is still being
broken down.  This condition will not occur if using an ephemeral
port.
.Sp
.Vb 2
\& http://groups.google.com/groups?selm=fa.epucqgv.1l2kl0e@ifi.uio.no
\& (See "unable to create socket" comment)
.Ve
.Sp
3) Many hackers use source port 20 to blindly circumvent certain
naive firewalls.  Using an ephemeral port (the default) may help
discourage such dangerous naivety.
.Sp
.Vb 2
\& man nmap
\& (See the \-g option)
.Ve
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`ftp data port: ftp\-data\*(C'\fR
.IP "max login attempts" 4
.IX Item "max login attempts"
Maximum number of login attempts before we drop the connection
and issue a warning in the logs. Wu-ftpd defaults this to 5.
.Sp
Default: 3
.Sp
Example: \f(CW\*(C`max login attempts: 5\*(C'\fR
.IP "pam authentication" 4
.IX Item "pam authentication"
Use \s-1PAM\s0 for authentication. Required on systems such as Red Hat Linux
and Solaris which use \s-1PAM\s0 for authentication rather than the normal
\&\f(CW\*(C`/etc/passwd\*(C'\fR mechanisms. You will need to have the \f(CW\*(C`Authen::PAM\*(C'\fR
Perl module installed for this to work.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`pam authentication: 1\*(C'\fR
.IP "pam application name" 4
.IX Item "pam application name"
If \s-1PAM\s0 authentication is enabled, then this is the \s-1PAM\s0 application
name. I have used \f(CW\*(C`ftp\*(C'\fR as the default which is the same name
that wu-ftpd chooses. FreeBSD users will want to use \f(CW\*(C`ftpd\*(C'\fR here.
.Sp
Default: ftp
.Sp
Example: \f(CW\*(C`pam application name: ftpd\*(C'\fR
.IP "password file" 4
.IX Item "password file"
Only in the \f(CW\*(C`Full\*(C'\fR personality, this allows you to specify a password
file which is used for authentication. If you enable this option, then
normal \s-1PAM\s0 or \f(CW\*(C`/etc/passwd\*(C'\fR is bypassed and this password file is
used instead.
.Sp
Each line in the password file has the following format:
.Sp
.Vb 1
\& username:crypted_password:unix_user[:root_directory]
.Ve
.Sp
Comments and blank lines are ignored.
.Sp
For example, a line with:
.Sp
.Vb 1
\& guest:ab01FAX.bQRSU:rich:/home/rich/guest\-uploads
.Ve
.Sp
would allow someone to log in as \f(CW\*(C`guest\*(C'\fR with password
\&\f(CW123456\fR. After logging in, the \s-1FTP\s0 server will assume the identity
of the real Unix user \f(CW\*(C`rich\*(C'\fR, and will chroot itself into the
\&\f(CW\*(C`/home/rich/guest\-uploads\*(C'\fR directory.
.Sp
(Note that because ordinary \s-1PAM/\s0\f(CW\*(C`passwd\*(C'\fR is bypassed, it would no
longer be possible for a user to log in directly with the username
\&\f(CW\*(C`rich\*(C'\fR).
.Sp
Crypted passwords can be generated using the following command:
.Sp
.Vb 1
\& perl \-e \*(Aqprint crypt ("123456", "ab"), "\en"\*(Aq
.Ve
.Sp
Replace \f(CW123456\fR with the actual password, and replace \f(CW\*(C`ab\*(C'\fR with two
random letters from the set \f(CW\*(C`[a\-zA\-Z0\-9./]\*(C'\fR. (The two random letters
are the so-called \fIsalt\fR and are used to make dictionary attacks
against the password file more difficult \- see \f(CWcrypt(3)\fR).
.Sp
The user's home directory comes from the real Unix password file
(or nsswitch-configured source) for the real Unix user.  You cannot
use password files to override this, and so if you are using the
optional \f(CW\*(C`root_directory\*(C'\fR parameter, it would make sense to add
\&\f(CW\*(C`home directory: /\*(C'\fR into your configuration file.
.Sp
Anonymous logins are \fBnot\fR affected by the \f(CW\*(C`password file\*(C'\fR
option. Use the \f(CW\*(C`allow anonymous\*(C'\fR flag to control whether anonymous
logins are permitted in the \f(CW\*(C`Full\*(C'\fR back-end.
.Sp
Password files are not the height of security, but they are included
because they can sometimes be useful. In particular if the password
file can be read by untrusted users then it is likely that those same
users can run the \fIcrack\fR program and eventually find out your
passwords. Some small additional security is offered by having the
password file readable only by root (mode 0600). In future we may
offer \s-1MD5\s0 or salted \s-1SHA\-1\s0 hashed passwords to make this harder.
.Sp
A curious artifact of the implementation allows you to list the same
user with multiple different passwords. Any of the passwords is then
valid for logins (and you could even have the user map to different
real Unix users in different chrooted directories!)
.Sp
Default: (none)
.Sp
Example: \f(CW\*(C`password file: /etc/ftpd.passwd\*(C'\fR
.IP "pidfile" 4
.IX Item "pidfile"
Location of the file to store the process \s-1ID\s0 (\s-1PID\s0).
Applies only to the deamonized process, not the child processes.
.Sp
Default: (no pidfile created)
.Sp
Example: \f(CW\*(C`pidfile: /var/run/ftpd.pid\*(C'\fR
.IP "client logging" 4
.IX Item "client logging"
Location to store all client commands sent to the server.
The format is the date, the pid, and the command.
Following the pid is a \*(L"\-\*(R" if not authenticated the
username if the connection is authenticated.
Example of before and after authentication:
.Sp
.Vb 3
\& [Wed Feb 21 18:41:32 2001][23818:\-]USER rob
\& [Wed Feb 21 18:41:33 2001][23818:\-]PASS 123456
\& [Wed Feb 21 18:41:33 2001][23818:*]SYST
.Ve
.Sp
Default: (no logging)
.Sp
Examples:
.Sp
.Vb 2
\& client logging: /var/log/ftpd.log
\& client logging: /tmp/ftpd_log.$hostname
.Ve
.IP "xfer logging" 4
.IX Item "xfer logging"
Location of transfer log.  The format was taken from
wu-ftpd and ProFTPD xferlog. (See also \*(L"man xferlog\*(R")
.Sp
Default: (no logging)
.Sp
Examples:
.Sp
.Vb 2
\& xfer logging: /var/log/xferlog
\& xfer logging: /tmp/xferlog.$hostname
.Ve
.IP "hide passwords in client log" 4
.IX Item "hide passwords in client log"
If set to 1, then password (\f(CW\*(C`PASS\*(C'\fR) commands will not be
logged in the client log. This option has no effect unless
client logging is enabled.
.Sp
Default: 0 (\s-1PASS\s0 lines will be shown)
.Sp
Example: \f(CW\*(C`hide passwords in client log: 1\*(C'\fR
.IP "enable syslog" 4
.IX Item "enable syslog"
Enable syslogging. If set, then Net::FTPServer will send much
information to syslog. On many systems, this information will
be available in /var/log/messages or /var/adm/messages. If
clear, syslogging is disabled.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`enable syslog: 0\*(C'\fR
.IP "ident timeout" 4
.IX Item "ident timeout"
Timeout for ident authentication lookups.
A timeout (in seconds) must be specified in order to
enable ident lookups.  There is no way to specify an
infinite timeout.  Use 0 to disable this feature.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`ident timeout: 10\*(C'\fR
.IP "access control rule" 4
.IX Item "access control rule"
.PD 0
.IP "user access control rule" 4
.IX Item "user access control rule"
.IP "retrieve rule" 4
.IX Item "retrieve rule"
.IP "store rule" 4
.IX Item "store rule"
.IP "delete rule" 4
.IX Item "delete rule"
.IP "list rule" 4
.IX Item "list rule"
.IP "mkdir rule" 4
.IX Item "mkdir rule"
.IP "rename rule" 4
.IX Item "rename rule"
.IP "chdir rule" 4
.IX Item "chdir rule"
.PD
Access control rules.
.Sp
Access control rules are all specified as short snippets of
Perl script. This allows the maximum configurability \*(-- you
can express just about any rules you want \*(-- but at the price
of learning a little Perl.
.Sp
You can use the following variables from the Perl:
.Sp
.Vb 12
\& $hostname      Resolved hostname of the client [1]
\& $ip            IP address of the client
\& $user          User name [2]
\& $class         Class of user [2]
\& $user_is_anonymous  True if the user is an anonymous user [2]
\& $pathname      Full pathname of the file being affected [2]
\& $filename      Filename of the file being affected [2,3]
\& $dirname       Directory name containing file being affected [2]
\& $type          \*(AqA\*(Aq for ASCII, \*(AqB\*(Aq for binary, \*(AqL8\*(Aq for local 8\-bit
\& $form          Always \*(AqN\*(Aq
\& $mode          Always \*(AqS\*(Aq
\& $stru          Always \*(AqF\*(Aq
.Ve
.Sp
Notes:
.Sp
[1] May be undefined, particularly if \f(CW\*(C`resolve addresses\*(C'\fR is not set.
.Sp
[2] Not available in \f(CW\*(C`access control rule\*(C'\fR since the user has not
logged in at this point.
.Sp
[3] Not available for \f(CW\*(C`list directory rule\*(C'\fR.
.Sp
Access control rule. The \s-1FTP\s0 server will not accept any connections
from a site unless this rule succeeds. Note that only \f(CW$hostname\fR
and \f(CW$ip\fR are available to this rule, and unless \f(CW\*(C`resolve addresses\*(C'\fR
and \f(CW\*(C`require resolved addresses\*(C'\fR are both set \f(CW$hostname\fR may
be undefined.
.Sp
Default: 1
.Sp
Examples:
.Sp
.Vb 1
\& (a) Deny connections from *.badguys.com:
\&
\&     access control rule: defined ($hostname) && \e
\&                          $hostname !~ /\e.badguys\e.com$/
\&
\& (b) Only allow connections from local network 10.0.0.0/24:
\&
\&     access control rule: $ip =~ /^10\e./
.Ve
.Sp
User access control rule. After the user logs in successfully,
this rule is then called to determine if the user may be permitted
access.
.Sp
Default: 1
.Sp
Examples:
.Sp
.Vb 1
\& (a) Only allow \`\`rich\*(Aq\*(Aq to log in from 10.x.x.x network:
\&
\&     user access control rule: $user ne "rich" || \e
\&                               $ip =~ /^10\e./
\&
\& (b) Only allow anonymous users to log in if they come from
\&     hosts with resolving hostnames (\`\`resolve addresses\*(Aq\*(Aq must
\&     also be set):
\&
\&     user access control rule: !$user_is_anonymous || \e
\&                               defined ($hostname)
\&
\& (c) Do not allow user \`\`jeff\*(Aq\*(Aq to log in at all:
\&
\&     user access control rule: $user ne "jeff"
.Ve
.Sp
Retrieve rule. This rule controls who may retrieve (download) files.
.Sp
Default: 1
.Sp
Examples:
.Sp
.Vb 2
\& (a) Do not allow anyone to retrieve \`\`/etc/*\*(Aq\*(Aq or any file anywhere
\&     called \`\`.htaccess\*(Aq\*(Aq:
\&
\&     retrieve rule: $dirname !~ m(^/etc/) && $filename ne ".htaccess"
\&
\& (b) Only allow anonymous users to retrieve files from under the
\&     \`\`/pub\*(Aq\*(Aq directory.
\&
\&     retrieve rule: !$user_is_anonymous || $dirname =~ m(^/pub/)
.Ve
.Sp
Store rule. This rule controls who may store (upload) files.
.Sp
In the anonymous read-only (ro-ftpd) personality, it is not
possible to upload files anyway, so setting this rule has no
effect.
.Sp
Default: 1
.Sp
Examples:
.Sp
.Vb 2
\& (a) Only allow users to upload files to the \`\`/incoming\*(Aq\*(Aq
\&     directory.
\&
\&     store rule: $dirname =~ m(^/incoming/)
\&
\& (b) Anonymous users can only upload files to \`\`/incoming\*(Aq\*(Aq
\&     directory.
\&
\&     store rule: !$user_is_anonymous || $dirname =~ m(^/incoming/)
\&
\& (c) Disable file upload.
\&
\&     store rule: 0
.Ve
.Sp
Delete rule. This rule controls who may delete files or rmdir directories.
.Sp
In the anonymous read-only (ro-ftpd) personality, it is not
possible to delete files anyway, so setting this rule has no
effect.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`delete rule: 0\*(C'\fR
.Sp
List rule. This rule controls who may list out the contents of a
directory.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`list rule: $dirname =~ m(^/pub/)\*(C'\fR
.Sp
Mkdir rule. This rule controls who may create a subdirectory.
.Sp
In the anonymous read-only (ro-ftpd) personality, it is not
possible to create directories anyway, so setting this rule has
no effect.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`mkdir rule: 0\*(C'\fR
.Sp
Rename rule. This rule controls which files or directories can be renamed.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`rename rule: $pathname !~ m(/.htaccess$)\*(C'\fR
.Sp
Chdir rule. This rule controls which directories are acceptable to a
\&\s-1CWD\s0 or \s-1CDUP.\s0
.Sp
Example: \f(CW\*(C`chdir rule: $pathname !~ m/private/\*(C'\fR
.IP "chdir message file" 4
.IX Item "chdir message file"
Change directory message file. If set, then the first time (per
session) that a user goes into a directory which contains a file
matching this name, that file will be displayed.
.Sp
The file may contain any of the following % escape sequences:
.Sp
.Vb 10
\& %C  current working directory
\& %E  maintainer\*(Aqs email address (from \`\`maintainer email\*(Aq\*(Aq
\&     setting above)
\& %G  time in GMT
\& %R  remote hostname or IP address if \`\`resolve addresses\*(Aq\*(Aq
\&     is not set
\& %L  local hostname
\& %m  user\*(Aqs home directory (see \`\`home directory\*(Aq\*(Aq below)
\& %T  local time
\& %U  username given when logging in
\& %u  currently a synonym for %U, but in future will be
\&     determined from RFC931 authentication, like wu\-ftpd
\& %%  just an ordinary \`\`%\*(Aq\*(Aq
.Ve
.Sp
Default: (none)
.Sp
Example: \f(CW\*(C`chdir message file: .message\*(C'\fR
.IP "allow rename to overwrite" 4
.IX Item "allow rename to overwrite"
Allow the rename (\s-1RNFR/RNTO\s0) command to overwrite files. If unset,
then we try to test whether the rename command would overwrite a
file and disallow it. However there are some race conditions with
this test.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`allow rename to overwrite: 0\*(C'\fR
.IP "allow store to overwrite" 4
.IX Item "allow store to overwrite"
Allow the store commands (\s-1STOR/STOU/APPE\s0) to overwrite files. If unset,
then we try to test whether the store command would overwrite a
file and disallow it. However there are some race conditions with
this test.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`allow store to overwrite: 0\*(C'\fR
.IP "alias" 4
.IX Item "alias"
Define an alias \f(CW\*(C`name\*(C'\fR for directory \f(CW\*(C`dir\*(C'\fR. For example, the command
\&\f(CW\*(C`alias: mirror /pub/mirror\*(C'\fR would allow the user to access the
\&\f(CW\*(C`/pub/mirror\*(C'\fR directory directly just by typing \f(CW\*(C`cd mirror\*(C'\fR.
.Sp
Aliases only apply to the cd (\s-1CWD\s0) command. The \f(CW\*(C`cd foo\*(C'\fR command checks
for directories in the following order:
.Sp
.Vb 3
\& foo in the current directory
\& an alias called foo
\& foo in each directory in the cdpath (see \`\`cdpath\*(Aq\*(Aq command below)
.Ve
.Sp
You may list an many aliases as you want.
.Sp
Alias names cannot contain slashes (/).
.Sp
Although alias dirs may start without a slash (/), this is unwise and
it's better that they always start with a slash (/) char.
.Sp
General format: \f(CW\*(C`alias: \f(CIname\f(CW \f(CIdir\f(CW\*(C'\fR
.IP "cdpath" 4
.IX Item "cdpath"
Define a search path which is used when changing directories. For
example, the command \f(CW\*(C`cdpath: /pub/mirror /pub/sites\*(C'\fR would allow
the user to access the \f(CW\*(C`/pub/mirror/ftp.cpan.org\*(C'\fR directory
directly by just typing \f(CW\*(C`cd ftp.cpan.org\*(C'\fR.
.Sp
The \f(CW\*(C`cd foo\*(C'\fR command checks for directories in the following order:
.Sp
.Vb 3
\& foo in the current directory
\& an alias called foo (see \`\`alias\*(Aq\*(Aq command above)
\& foo in each directory in the cdpath
.Ve
.Sp
General format: \f(CW\*(C`cdpath: \f(CIdir1\f(CW [\f(CIdir2\f(CW [\f(CIdir3\f(CW ...]]\*(C'\fR
.IP "allow site version command" 4
.IX Item "allow site version command"
\&\s-1SITE VERSION\s0 command. If set, then the \s-1SITE VERSION\s0 command reveals
the current Net::FTPServer version string. If unset, then the command
is disabled.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`allow site version command: 0\*(C'\fR
.IP "allow site exec command" 4
.IX Item "allow site exec command"
\&\s-1SITE EXEC\s0 command. If set, then the \s-1SITE EXEC\s0 command allows arbitrary
commands to be executed on the server as the current user. If unset,
then this command is disabled. The default is disabled for obvious
security reasons.
.Sp
If you do allow \s-1SITE EXEC,\s0 you may need to increase the per process
memory, processes and files limits above.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`allow site exec command: 1\*(C'\fR
.IP "enable archive mode" 4
.IX Item "enable archive mode"
Archive mode. If set (the default), then archive mode is
enabled, allowing users to request, say, \f(CW\*(C`file.gz\*(C'\fR and
get a version of \f(CW\*(C`file\*(C'\fR which is gzip-compressed on the
fly. If zero, then this feature is disabled. See the
section \s-1ARCHIVE MODE\s0 elsewhere in this manual for details.
.Sp
Since archive mode is implemented using external commands,
you need to ensure that programs such as \f(CW\*(C`gzip\*(C'\fR,
\&\f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`uuencode\*(C'\fR, etc. are available on
the \f(CW$PATH\fR (even in the chrooted environment), and you also
need to substantially increase the normal per-process memory,
processes and files limits.
.Sp
Default: 1
.Sp
Example: \f(CW\*(C`enable archive mode: 0\*(C'\fR
.IP "archive zip temporaries" 4
.IX Item "archive zip temporaries"
Temporary directory for generating \s-1ZIP\s0 files in archive mode.
In archive mode, when generating \s-1ZIP\s0 files, the \s-1FTP\s0 server is
capable of either creating a temporary file on local disk
containing the \s-1ZIP\s0 contents, or can generate the file completely
in memory. The former method saves memory. The latter method
(only practical on small \s-1ZIP\s0 files) allows the server to work
more securely and in certain read-only chrooted environments.
.Sp
(Unfortunately the \s-1ZIP\s0 file format itself prevents \s-1ZIP\s0 files
from being easily created on the fly).
.Sp
If not specified in the configuration file, this option
defaults to using \f(CW\*(C`/tmp\*(C'\fR. If there are local users on the
\&\s-1FTP\s0 server box, then this can lead to various \f(CW\*(C`tmp\*(C'\fR races,
so for maximum security you will probably want to change
this.
.Sp
If specified, and set to a string, then the string is the
name of a directory which is used for storing temporary zip
files. This directory must be writable, and must exist inside
the chrooted environment (if chroot is being used).
.Sp
If specified, but set to \*(L"0\*(R" or an empty string, then
the server will always generate the \s-1ZIP\s0 file in memory.
.Sp
In any case, if the directory is found at runtime to be
unwritable, then the server falls back to creating \s-1ZIP\s0
files in memory.
.Sp
Default: \f(CW\*(C`/tmp\*(C'\fR
.Sp
Example: \f(CW\*(C`archive zip temporaries: \*(C'\fR
.Sp
Example: \f(CW\*(C`archive zip temporaries: /var/ziptmp\*(C'\fR
.IP "site command" 4
.IX Item "site command"
Custom \s-1SITE\s0 commands. Use this command to define custom \s-1SITE\s0
commands. Please read the section \s-1LOADING CUSTOMIZED SITE
COMMANDS\s0 in this manual page for more detailed information.
.Sp
The \f(CW\*(C`site command\*(C'\fR command has the form:
.Sp
\&\f(CW\*(C`site command: \f(CIcmdname\f(CW \f(CIfile\f(CW\*(C'\fR
.Sp
\&\fIcmdname\fR is the name of the command (eg. for \s-1SITE README\s0 you
would set \fIcmdname\fR == \f(CW\*(C`readme\*(C'\fR). \fIfile\fR is a file containing the
code of the site command in the form of an anonymous Perl
subroutine. The file should have the form:
.Sp
.Vb 4
\& sub {
\&   my $self = shift;            # The FTPServer object.
\&   my $cmd = shift;             # Contains the command itself.
\&   my $rest = shift;            # Contains any parameters passed by the user.
\&
\&      :     :
\&      :     :
\&
\&   $self\->reply (RESPONSE_CODE, RESPONSE_TEXT);
\& }
.Ve
.Sp
You may define as many site commands as you want. You may also
override site commands from the current personality here.
.Sp
Example:
.Sp
.Vb 1
\& site command: quota /usr/local/lib/ftp/quota.pl
.Ve
.Sp
and the file \f(CW\*(C`/usr/local/lib/ftp/quota.pl\*(C'\fR contains:
.Sp
.Vb 4
\& sub {
\&   my $self = shift;            # The FTPServer object.
\&   my $cmd = shift;             # Contains "QUOTA".
\&   my $rest = shift;            # Contains parameters passed by user.
\&
\&   # ... Some code to compute the user\*(Aqs quota ...
\&
\&   $self\->reply (200, "Your quota is $quota MB.");
\& }
.Ve
.Sp
The client types \f(CW\*(C`SITE QUOTA\*(C'\fR and the server responds with:
.Sp
.Vb 1
\& "200 Your quota is 12.5 MB.".
.Ve
.IP "<Host hostname> ... </Host>" 4
.IX Item "<Host hostname> ... </Host>"
<Host hostname> ... </Host> encloses
commands which are applicable only to a particular
host. \f(CW\*(C`hostname\*(C'\fR may be either a fully-qualified
domain name (for IP-less virtual hosts) or an \s-1IP\s0
address (for IP-based virtual hosts). You should read
the section \s-1VIRTUAL HOSTS\s0 in this manual page for
more information on the different types of virtual
hosts and how to set it up in more detail.
.Sp
Note also that unless you have set \f(CW\*(C`enable virtual hosts: 1\*(C'\fR,
all <Host> sections will be ignored.
.IP "enable virtual hosts" 4
.IX Item "enable virtual hosts"
Unless this option is uncommented, virtual hosting is disabled
and the <Host> sections in the configuration file have no effect.
.Sp
Default: 0
.Sp
Example: \f(CW\*(C`enable virtual hosts: 1\*(C'\fR
.IP "virtual host multiplex" 4
.IX Item "virtual host multiplex"
IP-less virtual hosts. If you want to enable IP-less virtual
hosts, then you must set up your \s-1DNS\s0 so that all hosts map
to a single \s-1IP\s0 address, and place that \s-1IP\s0 address here. This
is roughly equivalent to the Apache \f(CW\*(C`NameVirtualHost\*(C'\fR option.
.Sp
IP-less virtual hosting is an experimental feature which
requires changes to clients.
.Sp
Default: (none)
.Sp
Example: \f(CW\*(C`virtual host multiplex: 1.2.3.4\*(C'\fR
.Sp
Example <Host> section. Allow the dangerous \s-1SITE EXEC\s0 command
on local connections. (Note that this is still dangerous).
.Sp
.Vb 4
\& <Host localhost.localdomain>
\&   ip: 127.0.0.1
\&   allow site exec command: 1
\& </Host>
.Ve
.Sp
Example <Host> section. This shows you how to do IP-based
virtual hosts. I assume that you have set up your \s-1DNS\s0 so that
\&\f(CW\*(C`ftp.bob.example.com\*(C'\fR maps to \s-1IP\s0 \f(CW1.2.3.4\fR and \f(CW\*(C`ftp.jane.example.com\*(C'\fR
maps to \s-1IP\s0 \f(CW1.2.3.5\fR, and you have set up suitable \s-1IP\s0 aliasing
in the kernel.
.Sp
You do not need the \f(CW\*(C`ip:\*(C'\fR command if you have configured reverse
\&\s-1DNS\s0 correctly \s-1AND\s0 you trust your local \s-1DNS\s0 servers.
.Sp
.Vb 7
\& <Host ftp.bob.example.com>
\&   ip: 1.2.3.4
\&   root directory: /home/bob
\&   home directory: /
\&   user access control rule: $user eq "bob"
\&   maintainer email: bob@bob.example.com
\& </Host>
\&
\& <Host ftp.jane.example.com>
\&   ip: 1.2.3.5
\&   root directory: /home/jane
\&   home directory: /
\&   allow anonymous: 1
\&   user access control rule: $user_is_anonymous
\&   maintainer email: jane@jane.example.com
\& </Host>
.Ve
.Sp
These rules set up two virtual hosts called \f(CW\*(C`ftp.bob.example.com\*(C'\fR
and \f(CW\*(C`ftp.jane.example.com\*(C'\fR. The former is located under bob's
home directory and only he is allowed to log in. The latter is
located under jane's home directory and only allows anonymous
access.
.Sp
Example <Host> section. This shows you how to do IP-less
virtual hosts. Note that IP-less virtual hosts are a highly
experimental feature, and require the client to support the
\&\s-1HOST\s0 command.
.Sp
You need to set up your \s-1DNS\s0 so that both \f(CW\*(C`ftp.bob.example.com\*(C'\fR
and \f(CW\*(C`ftp.jane.example.com\*(C'\fR point to your own \s-1IP\s0 address.
.Sp
.Vb 1
\& virtual host multiplex: 1.2.3.4
\&
\& <Host ftp.bob.example.com>
\&   root directory: /home/bob
\&   home directory: /
\&   user access control rule: $user eq "bob"
\& </Host>
\&
\& <Host ftp.jane.example.com>
\&   root directory: /home/jane
\&   home directory: /
\&   allow anonymous: 1
\&   user access control rule: $user_is_anonymous
\& </Host>
.Ve
.IP "log socket type" 4
.IX Item "log socket type"
Socket type for contacting syslog. This is the argument to
the \f(CW\*(C`Sys::Syslog::setlogsock\*(C'\fR function.
.Sp
Default: unix
.Sp
Example: \f(CW\*(C`log socket type: inet\*(C'\fR
.IP "listen queue" 4
.IX Item "listen queue"
Length of the listen queue when running in daemon mode.
.Sp
Default: 10
.Sp
Example: \f(CW\*(C`listen queue: 20\*(C'\fR
.IP "tcp window" 4
.IX Item "tcp window"
Set \s-1TCP\s0 window. See \s-1RFC 2415\s0
\&\fISimulation Studies of Increased Initial \s-1TCP\s0 Window Size\fR.
This setting only affects the data
socket. It's not likely that you will need to or should change
this setting from the system-specific default.
.Sp
Default: (system-specific \s-1TCP\s0 window size)
.Sp
Example: \f(CW\*(C`tcp window: 4380\*(C'\fR
.IP "tcp keepalive" 4
.IX Item "tcp keepalive"
Set \s-1TCP\s0 keepalive.
.Sp
Default: (system-specific keepalive setting)
.Sp
Example: \f(CW\*(C`tcp keepalive: 1\*(C'\fR
.IP "command filter" 4
.IX Item "command filter"
Command filter. If set, then all commands are checked against
this regular expression before being executed. If a command
doesn't match the filter, then the command connection is
immediately dropped. This is equivalent to the \f(CW\*(C`AllowFilter\*(C'\fR
command in ProFTPD. Remember to include \f(CW\*(C`^...$\*(C'\fR around the filter.
.Sp
Default: (no filter)
.Sp
Example: \f(CW\*(C`command filter: ^[A\-Za\-z0\-9 /]+$\*(C'\fR
.IP "restrict command" 4
.IX Item "restrict command"
Advanced command filtering. The \f(CW\*(C`restrict command\*(C'\fR directive takes
the form:
.Sp
.Vb 1
\& restrict command: "COMMAND" perl code ...
.Ve
.Sp
If the user tries to execute \f(CW\*(C`COMMAND\*(C'\fR, then the \f(CW\*(C`perl code\*(C'\fR is
evaluated first. If it evaluates to true, then the command is allowed
to proceed. Otherwise the server reports an error back to the user and
does not execute the command.
.Sp
Note that the \f(CW\*(C`COMMAND\*(C'\fR is the \s-1FTP\s0 protocol command, which is not
necessarily the same as the command which users will type in on their
\&\s-1FTP\s0 clients. Please read \s-1RFC 959\s0 to see some of the more common \s-1FTP\s0
protocol commands.
.Sp
The Perl code has the same variables available to it as for access
control rules (eg. \f(CW$user\fR, \f(CW$class\fR, \f(CW$ip\fR, etc.). The code
\&\fImust not\fR alter the global \f(CW$_\fR variable (which contains the
complete command).
.Sp
Default: all commands are allowed by default
.Sp
Examples:
.Sp
Only allow users in the class \f(CW\*(C`nukers\*(C'\fR to delete files and
directories:
.Sp
.Vb 2
\& restrict command: "DELE" $class eq "nukers"
\& restrict command: "RMD" $class eq "nukers"
.Ve
.Sp
Only allow staff to use the \f(CW\*(C`SITE WHO\*(C'\fR command:
.Sp
.Vb 1
\& restrict command: "SITE WHO" $class eq "staff"
.Ve
.Sp
Only allow \f(CW\*(C`rich\*(C'\fR to run the \f(CW\*(C`SITE EXEC\*(C'\fR command:
.Sp
.Vb 2
\& allow site exec command: 1
\& restrict command: "SITE EXEC" $user eq "rich"
.Ve
.IP "command wait" 4
.IX Item "command wait"
Go slow. If set, then the server will sleep for this many seconds
before beginning to process each command. This command would be
a lot more useful if you could apply it only to particular
classes of connection.
.Sp
Default: (no wait)
.Sp
Example: \f(CW\*(C`command wait: 5\*(C'\fR
.IP "no authentication commands" 4
.IX Item "no authentication commands"
The list of commands which a client may issue before they have
authenticated themselves is very limited. Obviously \f(CW\*(C`USER\*(C'\fR and
\&\f(CW\*(C`PASS\*(C'\fR are allowed (otherwise a user would never be able to log
in!), also \f(CW\*(C`QUIT\*(C'\fR, \f(CW\*(C`LANG\*(C'\fR, \f(CW\*(C`HOST\*(C'\fR and \f(CW\*(C`FEAT\*(C'\fR. \f(CW\*(C`HELP\*(C'\fR is also permitted
(although dubious). Any other commands not on this list will
result in a \fI530 Not logged in.\fR error.
.Sp
This list ought to contain at least \f(CW\*(C`USER\*(C'\fR, \f(CW\*(C`PASS\*(C'\fR and \f(CW\*(C`QUIT\*(C'\fR
otherwise the server won't be very functional.
.Sp
Some commands cannot be added here \*(-- eg. adding \f(CW\*(C`CWD\*(C'\fR or \f(CW\*(C`RETR\*(C'\fR
to this list is likely to make the \s-1FTP\s0 server crash, or else enable
users to read files only available to root. Hence use this with
great care.
.Sp
Default: \s-1USER PASS QUIT LANG HOST FEAT HELP\s0
.Sp
Example: \f(CW\*(C`no authentication commands: USER PASS QUIT\*(C'\fR
.IP "<Perl> ... </Perl>" 4
.IX Item "<Perl> ... </Perl>"
Use the <Perl> directive to write Perl code directly
into your configuration file. Here is a simple example:
.Sp
.Vb 6
\& <Perl>
\& use Sys::Hostname;
\& $config{\*(Aqmaintainer email\*(Aq} = "root\e@" . hostname ();
\& $config{port} = 8000 + 21;
\& $config{debug} = $ENV{FTP_DEBUG} ? 1 : 0;
\& </Perl>
.Ve
.Sp
As shown in the example, to set a configuration option called
\&\f(CW\*(C`foo\*(C'\fR, you simply assign to the variable \f(CW$config{foo}\fR.
.Sp
All normal Perl functionality is available to you, including
use of \f(CW\*(C`require\*(C'\fR if you need to run an external Perl script.
.Sp
The <Perl> and </Perl> directives must each appear
on a single line on their own.
.Sp
To assign multiple configuration options with the same name,
use an array ref:
.Sp
.Vb 6
\& <Perl>
\& my @aliases = ( "foo /pub/foo",
\&                 "bar /pub/bar",
\&                 "baz /pub/baz" );
\& $config{alias} = \e@aliases;
\& </Perl>
.Ve
.Sp
You cannot use a <Perl> section within a <Host>
section. Instead, you must simulate it by assigning to the
\&\f(CW%host_config\fR variable like this:
.Sp
.Vb 4
\& <Perl>
\& $host_config{\*(Aqlocalhost.localdomain\*(Aq}{ip} = "127.0.0.1";
\& $host_config{\*(Aqlocalhost.localdomain\*(Aq}{\*(Aqallow site exec command\*(Aq}= 1;
\& </Perl>
.Ve
.Sp
The above is equivalent to the following ordinary <Host>
section:
.Sp
.Vb 4
\& <Host localhost.localdomain>
\&   ip: 127.0.0.1
\&   allow site exec command: 1
\& </Host>
.Ve
.Sp
You may also assign to the \f(CW$self\fR variable in order to set
variables directly in the \f(CW\*(C`Net::FTPServer\*(C'\fR object itself. This
is pretty hairy, and hence not recommended, but you dig your own
hole if you want. Here is a contrived example:
.Sp
.Vb 3
\& <Perl>
\& $self\->{version_string} = "my FTP server/1.0";
\& </Perl>
.Ve
.Sp
A cleaner, but more complex way to do this would be to use
a personality.
.Sp
The <Perl> directive is potentially quite powerful.
Here is a good idea that Rob Brown had:
.Sp
.Vb 6
\& <Perl>
\& my %H;
\& dbmopen (%H, "/etc/ftpd.db", 0644);
\& %config = %H;
\& dbmclose (%H);
\& </Perl>
.Ve
.Sp
Notice how this allows you to crunch a possibly very large
configuration file into a hash, for very rapid loading at run time.
.Sp
Another useful way to use <Perl> is to set environment
variables (particularly \f(CW$PATH\fR).
.Sp
.Vb 3
\& <Perl>
\& $ENV{PATH} = "/usr/local/bin:$ENV{PATH}"
\& </Perl>
.Ve
.Sp
Here's yet another wonderful way to use <Perl>.
Look in \f(CW\*(C`/usr/local/lib/ftp/\*(C'\fR for a list of site commands
and load each one:
.Sp
.Vb 1
\& <Perl>
\&
\& my @files = glob "/usr/local/lib/ftp/*.pl";
\& my @site_commands;
\&
\& foreach (@files)
\&  {
\&    push @site_commands, "$1 $_" if /([a\-z]+)\e.pl/;
\&  }
\&
\& $config{\*(Aqsite command\*(Aq} = \e@site_commands;
\&
\& </Perl>
.Ve
.Sp
To force a particular version of Net::FTPServer to be
used, include the following code in your configuration
file:
.Sp
.Vb 5
\&  <Perl>
\&  die "requires Net::FTPServer version >= 1.025"
\&    unless $Net::FTPServer::VERSION !~ /\e..*\e./ &&
\&           $Net::FTPServer::VERSION >= 1.025;
\&  </Perl>
.Ve
.SS "\s-1LOADING CUSTOMIZED SITE COMMANDS\s0"
.IX Subsection "LOADING CUSTOMIZED SITE COMMANDS"
It is very simple to write custom \s-1SITE\s0 commands. These
commands are available to users when they type \*(L"\s-1SITE XYZ\*(R"\s0
in a command line \s-1FTP\s0 client or when they define a custom
\&\s-1SITE\s0 command in their graphical \s-1FTP\s0 client.
.PP
\&\s-1SITE\s0 commands are unregulated by RFCs. You may define any commands and
give them any names and any function you wish. However, over time
various standard \s-1SITE\s0 commands have been recognized and implemented
in many \s-1FTP\s0 servers. \f(CW\*(C`Net::FTPServer\*(C'\fR also implements these. They
are:
.PP
.Vb 9
\&  SITE VERSION      Display the server software version.
\&  SITE EXEC         Execute a shell command on the server (in
\&                    C<Net::FTPServer> this is disabled by default!)
\&  SITE ALIAS        Display chdir aliases.
\&  SITE CDPATH       Display chdir paths.
\&  SITE CHECKMETHOD  Implement checksums.
\&  SITE CHECKSUM
\&  SITE IDLE         Get or set the idle timeout.
\&  SITE SYNC         Synchronize hard disks.
.Ve
.PP
The following commands are found in \f(CW\*(C`wu\-ftpd\*(C'\fR, but not currently
implemented by \f(CW\*(C`Net::FTPServer\*(C'\fR: \s-1SITE CHMOD, SITE GPASS, SITE GROUP,
SITE GROUPS, SITE INDEX, SITE MINFO, SITE NEWER, SITE UMASK.\s0
.PP
So when you are choosing a name for a \s-1SITE\s0 command, it is probably
best not to choose one of the above names, unless you are specifically
implementing or overriding that command.
.PP
Custom \s-1SITE\s0 commands have to be written in Perl. However, there
is very little you need to understand in order to write these
commands \*(-- you will only need a basic knowledge of Perl scripting.
.PP
As our first example, we will implement a \f(CW\*(C`SITE README\*(C'\fR command.
This command just prints out some standard information.
.PP
Firstly create a file called \f(CW\*(C`/usr/local/lib/site_readme.pl\*(C'\fR (you
may choose a different path if you want). The file should contain:
.PP
.Vb 4
\&  sub {
\&    my $self = shift;
\&    my $cmd = shift;
\&    my $rest = shift;
\&
\&    $self\->reply (200,
\&                  "This is the README file for mysite.example.com.",
\&                  "Mirrors are contained in /pub/mirrors directory.",
\&                  "       :       :       :       :       :",
\&                  "End of the README file.");
\&  }
.Ve
.PP
Edit \f(CW\*(C`/etc/ftpd.conf\*(C'\fR and add the following command:
.PP
site command: readme /usr/local/lib/site_readme.pl
.PP
and restart the \s-1FTP\s0 server (check your system log [/var/log/messages]
for any syntax errors or other problems). Here is an example of a
user running the \s-1SITE README\s0 command:
.PP
.Vb 10
\&  ftp> quote help site
\&  214\-The following commands are recognized:
\&  214\-    ALIAS   CHECKMETHOD     EXEC    README
\&  214\-    CDPATH  CHECKSUM        IDLE    VERSION
\&  214 You can also use HELP to list general commands.
\&  ftp> site readme
\&  200\-This is the README file for mysite.example.com.
\&  200\-Mirrors are contained in /pub/mirrors directory.
\&  200\-       :       :       :       :       :
\&  200 End of the README file.
.Ve
.PP
Our second example demonstrates how to use parameters
(the \f(CW$rest\fR argument). This is the \f(CW\*(C`SITE ECHO\*(C'\fR command.
.PP
.Vb 4
\&  sub {
\&    my $self = shift;
\&    my $cmd = shift;
\&    my $rest = shift;
\&
\&    # Split the parameters up.
\&    my @params = split /\es+/, $rest;
\&
\&    # Quote each parameter.
\&    my $reply = join ", ", map { "\*(Aq$_\*(Aq" } @params;
\&
\&    $self\->reply (200, "You said: $reply");
\&  }
.Ve
.PP
Here is the \f(CW\*(C`SITE ECHO\*(C'\fR command in use:
.PP
.Vb 7
\&  ftp> quote help site
\&  214\-The following commands are recognized:
\&  214\-    ALIAS   CHECKMETHOD     ECHO    IDLE
\&  214\-    CDPATH  CHECKSUM        EXEC    VERSION
\&  214 You can also use HELP to list general commands.
\&  ftp> site echo hello how are you?
\&  200 You said: \*(Aqhello\*(Aq, \*(Aqhow\*(Aq, \*(Aqare\*(Aq, \*(Aqyou?\*(Aq
.Ve
.PP
Our third example is more complex and shows how to interact
with the virtual filesystem (\s-1VFS\s0). The \f(CW\*(C`SITE SHOW\*(C'\fR command
will be used to list text files directly (the user normally
has to download the file and view it locally). Hence
\&\f(CW\*(C`SITE SHOW readme.txt\*(C'\fR should print the contents of the
\&\f(CW\*(C`readme.txt\*(C'\fR file in the local directory (if it exists).
.PP
All file accesses \fBmust\fR be done through the \s-1VFS,\s0 not
by directly accessing the disk. If you follow this convention
then your commands will be secure and will work correctly
with different back-end personalities (in particular when
``files'' are really blobs in a relational database).
.PP
.Vb 4
\&  sub {
\&    my $self = shift;
\&    my $cmd = shift;
\&    my $rest = shift;
\&
\&    # Get the file handle.
\&    my ($dirh, $fileh, $filename) = $self\->_get ($rest);
\&
\&    # File doesn\*(Aqt exist or not accessible. Return an error.
\&    unless ($fileh)
\&      {
\&        $self\->reply (550, "File or directory not found.");
\&        return;
\&      }
\&
\&    # Check it\*(Aqs a simple file.
\&    my ($mode) = $fileh\->status;
\&
\&    unless ($mode eq "f")
\&      {
\&        $self\->reply (550,
\&                      "SITE SHOW command is only supported on plain files.");
\&        return;
\&      }
\&
\&    # Try to open the file.
\&    my $file = $fileh\->open ("r");
\&
\&    unless ($file)
\&      {
\&        $self\->reply (550, "File or directory not found.");
\&        return;
\&      }
\&
\&    # Copy data into memory.
\&    my @lines = ();
\&
\&    while (defined ($_ = $file\->getline))
\&      {
\&        # Remove any native line endings.
\&        s/[\en\er]+$//;
\&
\&        push @lines, $_;
\&      }
\&
\&    # Close the file handle.
\&    unless ($file\->close)
\&      {
\&        $self\->reply (550, "Close failed: ".$self\->system_error_hook());
\&        return;
\&      }
\&
\&    # Send the file back to the user.
\&    $self\->reply (200, "File $filename:", @lines, "End of file.");
\&  }
.Ve
.PP
This code is not quite complete. A better implementation would
also check the \*(L"retrieve rule\*(R" (so that people couldn't
use \f(CW\*(C`SITE SHOW\*(C'\fR in order to get around access control limitations
which the server administrator has put in place). It would also
check the file more closely to make sure it was a text file and
would refuse to list very large files.
.PP
Here is an example (abbreviated) of a user using the
\&\f(CW\*(C`SITE SHOW\*(C'\fR command:
.PP
.Vb 9
\&  ftp> site show README
\&  200\-File README:
\&  200\-README
\&  200\-======
\&  200\-
\&  200\-Biblio@Tech Net::FTPServer \- A full\-featured, secure, extensible
\&  [...]
\&  200\-Copyright (C) 2000\-2003 Richard Jones <rich@annexia.org> and other contributors.
\&  200 End of file.
.Ve
.SS "\s-1STANDARD PERSONALITIES\s0"
.IX Subsection "STANDARD PERSONALITIES"
Currently \f(CW\*(C`Net::FTPServer\*(C'\fR is supplied with three standard
personalities. These are:
.PP
.Vb 2
\&  Full    The complete read/write anonymous/authenticated FTP
\&          server which serves files from a standard Unix filesystem.
\&
\&  RO      A small read\-only anonymous\-only FTP server similar
\&          in functionality to Dan Bernstein\*(Aqs publicfile
\&          program.
\&
\&  DBeg1   An example FTP server which serves files to a PostgreSQL
\&          database. This supports files and hierarchical
\&          directories, multiple users (but not file permissions)
\&          and file upload.
.Ve
.PP
The standard \fBFull\fR personality will not be explained here.
.PP
The \fB\s-1RO\s0\fR personality is the Full personality with all code
related to writing files, creating directories, deleting, etc.
removed. The \s-1RO\s0 personality also only permits anonymous
logins and does not contain any code to do ordinary
authentication. It is therefore safe to use the \s-1RO\s0
personality where you are only interested in serving
files to anonymous users and do not want to worry about
crackers discovering a way to trick the \s-1FTP\s0 server into
writing over a file.
.PP
The \fBDBeg1\fR personality is a complete read/write
\&\s-1FTP\s0 server which stores files as BLOBs (Binary Large
OBjects) in a PostgreSQL relational database. The
personality supports file download and upload and
contains code to authenticate users against a \f(CW\*(C`users\*(C'\fR
table in the database (database ``users'' are thus
completely unrelated to real Unix users). The
\&\fBDBeg1\fR is intended only as an example. It does
not support advanced features such as file
permissions and quotas. As part of the schoolmaster.net
project Bibliotech Ltd. have developed an even more
advanced database personality which supports users,
groups, access control lists, quotas, recursive
moves and copies and many other features. However this
database personality is not available as source.
.PP
To use the DBeg1 personality you must first run a
PostgreSQL server (version 6.4 or above) and ensure
that you have access to it from your local user account.
Use the \f(CW\*(C`initdb\*(C'\fR, \f(CW\*(C`createdb\*(C'\fR and \f(CW\*(C`createuser\*(C'\fR
commands to create the appropriate user account and
database (please consult the PostgreSQL administrators
manual for further information about this \*(-- I do
not answer questions about basic PostgreSQL knowledge).
.PP
Here is my correctly set up PostgreSQL server, accessed
from my local user account ``rich'':
.PP
.Vb 3
\&  cruiser:~$ psql
\&  Welcome to the POSTGRESQL interactive sql monitor:
\&    Please read the file COPYRIGHT for copyright terms of POSTGRESQL
\&
\&     type \e? for help on slash commands
\&     type \eq to quit
\&     type \eg or terminate with semicolon to execute query
\&   You are currently connected to the database: rich
\&
\&  rich=> \ed
\&  Couldn\*(Aqt find any tables, sequences or indices!
.Ve
.PP
You will also need the following Perl modules installed:
\&\s-1DBI,\s0 DBD::Pg.
.PP
Now you will need to create a database called ``ftp'' and
populate it with data. This is how to do this:
.PP
.Vb 2
\&  createdb ftp
\&  psql ftp < doc/eg1.sql
.Ve
.PP
Check that no ERRORs are reported by PostgreSQL.
.PP
You should now be able to start the \s-1FTP\s0 server by running
the following command (\fInot\fR as root):
.PP
.Vb 1
\&  ./dbeg1\-ftpd \-S \-p 2000 \-C ftpd.conf
.Ve
.PP
If the \s-1FTP\s0 server doesn't start correctly, you should
check the system log file [/var/log/messages].
.PP
Connect to the \s-1FTP\s0 server as follows:
.PP
.Vb 1
\&  ftp localhost 2000
.Ve
.PP
Log in as either rich/123456 or dan/123456 and then try
to move around, upload and download files, create and
delete directories, etc.
.SS "\s-1SUBCLASSING THE\s0 Net::FTPServer \s-1CLASSES\s0"
.IX Subsection "SUBCLASSING THE Net::FTPServer CLASSES"
By subclassing \f(CW\*(C`Net::FTPServer\*(C'\fR, \f(CW\*(C`Net::FTPServer::DirHandle\*(C'\fR and/or
\&\f(CW\*(C`Net::FTPServer::FileHandle\*(C'\fR you can create custom
personalities for the \s-1FTP\s0 server.
.PP
Typically by overriding the hooks in the \f(CW\*(C`Net::FTPServer\*(C'\fR class
you can change the basic behaviour of the \s-1FTP\s0 server \- turning
it into an anonymous read-only server, for example.
.PP
By overriding the hooks in \f(CW\*(C`Net::FTPServer::DirHandle\*(C'\fR and
\&\f(CW\*(C`Net::FTPServer::FileHandle\*(C'\fR you can create virtual filesystems:
serving files into and out of a database, for example.
.PP
The current manual page contains information about the
hooks in \f(CW\*(C`Net::FTPServer\*(C'\fR which may be overridden.
.PP
See \f(CWNet::FTPServer::DirHandle(3)\fR for information about
the methods in \f(CW\*(C`Net::FTPServer::DirHandle\*(C'\fR which may be
overridden.
.PP
See \f(CWNet::FTPServer::FileHandle(3)\fR for information about
the methods in \f(CW\*(C`Net::FTPServer::FileHandle\*(C'\fR which may be
overridden.
.PP
The most reasonable way to create your own personality is
to extend one of the existing personalities. Choose the
one which most closely matches the personality that you
want to create. For example, suppose that you want to create
another database personality. A good place to start would
be by copying \f(CW\*(C`lib/Net/FTPServer/DBeg1/*.pm\*(C'\fR to a new
directory \f(CW\*(C`lib/Net/FTPServer/MyDB/\*(C'\fR (for example). Now
edit these files and substitute \*(L"MyDB\*(R" for \*(L"DBeg1\*(R". Then
examine each subroutine in these files and modify them,
consulting the appropriate manual page if you need to.
.SS "\s-1VIRTUAL HOSTS\s0"
.IX Subsection "VIRTUAL HOSTS"
\&\f(CW\*(C`Net:FTPServer\*(C'\fR is capable of hosting multiple \s-1FTP\s0 sites on
a single machine. Because of the nature of the \s-1FTP\s0 protocol,
virtual hosting is almost always done by allocating a single
separate \s-1IP\s0 address per \s-1FTP\s0 site. However, \f(CW\*(C`Net::FTPServer\*(C'\fR
also supports an experimental IP-less virtual hosting
system, although this requires modifications to the client.
.PP
Normal (IP-based) virtual hosting is carried out as follows:
.PP
.Vb 12
\& * For each FTP site, allocate a separate IP address.
\& * Configure IP aliasing on your normal interface so that
\&   the single physical interface responds to multiple
\&   virtual IP addresses.
\& * Add entries (A records) in DNS mapping each site\*(Aqs
\&   name to a separate IP address.
\& * Add reverse entries (PTR records) in DNS mapping each
\&   IP address back to the site hostname. It is important
\&   that both forward and reverse DNS is set up correctly,
\&   else virtual hosting may not work.
\& * In /etc/ftpd.conf you will need to add a virtual host
\&   section for each site like this:
\&
\&     <Host sitename>
\&
\&       ip: 1.2.3.4
\&       ... any specific configuration options for this site ...
\&
\&     </Host>
\&
\&   You don\*(Aqt in fact need the "ip:" part assuming that
\&   your forward and reverse DNS are set up correctly.
\& * If you want to specify a lot of external sites, or
\&   generate the configuration file automatically from a
\&   database or a script, you may find the <Include filename>
\&   syntax useful.
.Ve
.PP
There are examples in \f(CW\*(C`/etc/ftpd.conf\*(C'\fR. Here is how
IP-based virtual hosting works:
.PP
.Vb 10
\& * The server starts by listening on all interfaces.
\& * A connection arrives at one of the IP addresses and a
\&   process is forked off.
\& * The child process finds out which interface the
\&   client connected to and reverses the name.
\& * If:
\&     the IP address matches one of the "ip:" declarations
\&     in any of the "Host" sections,
\&   or:
\&     there is a reversal for the name, and the name
\&     matches one of the "Host" sections in the configuration
\&     file,
\&   then:
\&     configuration options are read from that
\&     section of the file and override any global configuration
\&     options specified elsewhere in the file.
\& * Otherwise, the global configuration options only
\&   are used.
.Ve
.PP
IP-less virtual hosting is an experimental feature. It
requires the client to send a \f(CW\*(C`HOST\*(C'\fR command very early
on in the command stream \*(-- before \f(CW\*(C`USER\*(C'\fR and \f(CW\*(C`PASS\*(C'\fR. The
\&\f(CW\*(C`HOST\*(C'\fR command explicitly gives the hostname that the
\&\s-1FTP\s0 client is attempting to connect to, and so allows
many \s-1FTP\s0 sites to be multiplexed onto a single \s-1IP\s0
address. At the present time, I am not aware of \fIany\fR
\&\s-1FTP\s0 clients which implement the \f(CW\*(C`HOST\*(C'\fR command, although
they will undoubtedly become more common in future.
.PP
This is how to set up IP-less virtual hosting:
.PP
.Vb 4
\& * Add entries (A or CNAME records) in DNS mapping the
\&   name of each site to a single IP address.
\& * In /etc/ftpd.conf you will need to list the same single
\&   IP address to which all your sites map:
\&
\&     virtual host multiplex: 1.2.3.4
\&
\& * In /etc/ftpd.conf you will need to add a virtual host
\&   section for each site like this:
\&
\&     <Host sitename>
\&
\&       ... any specific configuration options for this site ...
\&
\&     </Host>
.Ve
.PP
Here is how IP-less virtual hosting works:
.PP
.Vb 10
\& * The server starts by listening on one interface.
\& * A connection arrives at the IP address and a
\&   process is forked off.
\& * The IP address matches "virtual host multiplex"
\&   and so no IP\-based virtual host processing is done.
\& * One of the first commands that the client sends is
\&   "HOST" followed by the hostname of the site.
\& * If there is a matching "Host" section in the
\&   configuration file, then configuration options are
\&   read from that section of the file and override any
\&   global configuration options specified elsewhere in
\&   the file.
\& * If there is no matching "Host" section then the
\&   global configuration options alone are used.
.Ve
.PP
The client is not permitted to issue the \f(CW\*(C`HOST\*(C'\fR command
more than once, and is not permitted to issue it after
login.
.SS "\s-1VIRTUAL HOSTING AND SECURITY\s0"
.IX Subsection "VIRTUAL HOSTING AND SECURITY"
Only certain configuration options are available inside
the <Host> sections of the configuration file.
Generally speaking, the only configuration options you
can put here are ones which take effect after the
site name has been determined \*(-- hence \*(L"allow anonymous\*(R"
is \s-1OK\s0 (since it's an option which is parsed after
determining the site name and during log in), but
\&\*(L"port\*(R" is not (since it is parsed long before any
clients ever connect).
.PP
Make sure your default global configuration is
secure. If you are using IP-less virtual hosting,
this is particularly important, since if the client
never sends a \f(CW\*(C`HOST\*(C'\fR command, the client gets
the global configuration. Even with IP-based virtual
hosting it may be possible for clients to sometimes
get the global configuration, for example if your
local name server fails.
.PP
IP-based virtual hosting always takes precedence
above IP-less virtual hosting.
.PP
With IP-less virtual hosting, access control cannot
be performed on a per-site basis. This is because the
client has to issue commands (ie. the \f(CW\*(C`HOST\*(C'\fR command
at least) before the site name is known to the server.
However you may still have a global \*(L"access control rule\*(R".
.SS "\s-1ARCHIVE MODE\s0"
.IX Subsection "ARCHIVE MODE"
Beginning with version 1.100, \f(CW\*(C`Net::FTPServer\*(C'\fR is able
to generate certain types of compressed and archived files
on the fly. In practice what this means is that if a user
requests, say, \f(CW\*(C`file.gz\*(C'\fR and this file does not actually
exist (but \f(CW\*(C`file\*(C'\fR \fIdoes\fR exist), then the server will
dynamically generate a gzip-compressed version of \f(CW\*(C`file\*(C'\fR
for the user. This also works on directories, so that a
user might request \f(CW\*(C`dir.tar.gz\*(C'\fR which does not exist
(but directory \f(CW\*(C`dir\*(C'\fR \fIdoes\fR exist), and the server tars
up and compresses the entire contents of \f(CW\*(C`dir\*(C'\fR and
presents that back to the user.
.PP
Archive mode is enabled by default. However, it will
not work unless you substantially increase the per-process
memory, processes and files limits. The reason for this
is that archive mode works by forking external programs
such as \f(CW\*(C`gzip\*(C'\fR to perform the compression. For the same
reason you may also need to ensure that at least
\&\f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR and \f(CW\*(C`uuencode\*(C'\fR programs
are available on the current \f(CW$PATH\fR, particularly if
you are using a chrooted environment.
.PP
To disable archive mode put \f(CW\*(C`enable archive mode: 0\*(C'\fR
into the configuration file.
.PP
The following file extensions are supported:
.PP
.Vb 7
\& .gz      GZip compressed.      Requires gzip program on PATH.
\& .Z       Unix compressed.      Requires compress program on PATH.
\& .bz2     BZip2 compressed.     Requires bzip2 program on PATH.
\& .uue     UU\-encoded.           Requires uuencode program on PATH.
\& .tar     Tar archive.          Requires Perl Archive::Tar module.
\& .zip     DOS ZIP archive.      Requires Perl Archive::Zip module.
\& .list    Return a list of all the files in this directory.
.Ve
.PP
File extensions may be combined. Hence \f(CW\*(C`.tar.gz\*(C'\fR,
\&\f(CW\*(C`.tar.bz2\*(C'\fR and even \f(CW\*(C`.tar.gz.uue\*(C'\fR will all work
as you expect.
.PP
Archive mode is, of course, extensible. It is particularly
simple to add another compression / filter format. In
your personality (or in a <Perl> section in the configuration
file) you need to add another key to the \f(CW\*(C`archive_filters\*(C'\fR
hash.
.PP
.Vb 1
\&  $ftps\->{archive_filters}{".foo"} = &_foo_filter;
.Ve
.PP
The value of this key should be a function as defined below:
.PP
.Vb 1
\&  \e%filter = _foo_filter ($ftps, $sock);
.Ve
.PP
The filter should return a hash reference (undef if it fails).
The hash should contain the following keys:
.PP
.Vb 2
\&  sock      Newly opened socket.
\&  pid       PID of filter program.
.Ve
.PP
The \f(CW\*(C`_foo_filter\*(C'\fR function takes the existing socket and
filters it, providing a new socket which the \s-1FTP\s0 server will
write to (for the data connection back to the client). If
your filter is a Unix program, then the simplest thing is
just to define \f(CW\*(C`_foo_filter\*(C'\fR as:
.PP
.Vb 4
\&  sub _foo_filter
\&  {
\&    return $_[0]\->archive_filter_external ($_[1], "foo" [, args ...]);
\&  }
.Ve
.PP
The \f(CW\*(C`archive_filter_external\*(C'\fR function takes care of the
tricky bits for you.
.PP
Adding new \fIgenerators\fR (akin to the existing tar and \s-1ZIP\s0)
is more tricky. I suggest you look closely at the code and
consult the author for more information.
.SH "METHODS"
.IX Header "METHODS"
.IP "Net::FTPServer\->run ([\e@ARGV]);" 4
.IX Item "Net::FTPServer->run ([@ARGV]);"
This is the main entry point into the \s-1FTP\s0 server. It starts the
\&\s-1FTP\s0 server running. This function never normally returns.
.Sp
If no arguments are given, then command line arguments are taken
from the global \f(CW@ARGV\fR array.
.ie n .IP "$regex = $ftps\->wildcard_to_regex ($wildcard)" 4
.el .IP "\f(CW$regex\fR = \f(CW$ftps\fR\->wildcard_to_regex ($wildcard)" 4
.IX Item "$regex = $ftps->wildcard_to_regex ($wildcard)"
This is a general library function shared between many of
the back-end database personalities. It converts a general
wildcard (eg. *.c) into a regular expression (eg. ^.*\e.c$ ).
.Sp
Thanks to: Terrence Monroe Brannon <terrence.brannon@oracle.com>.
.ie n .IP "$regex = $ftps\->wildcard_to_sql_like ($wildcard)" 4
.el .IP "\f(CW$regex\fR = \f(CW$ftps\fR\->wildcard_to_sql_like ($wildcard)" 4
.IX Item "$regex = $ftps->wildcard_to_sql_like ($wildcard)"
This is a general library function shared between many of
the back-end database personalities. It converts a general
wildcard (eg. *.c) into the strange wildcardish format
used by \s-1SQL LIKE\s0 operator (eg. %.c).
.ie n .IP "$ftps\->reply ($code, $line, [$line, ...])" 4
.el .IP "\f(CW$ftps\fR\->reply ($code, \f(CW$line\fR, [$line, ...])" 4
.IX Item "$ftps->reply ($code, $line, [$line, ...])"
This function sends a standard single line or multi-line \s-1FTP\s0
server reply to the client. The \f(CW$code\fR should be one of the
standard reply codes listed in \s-1RFC 959.\s0 The one or more
\&\f(CW$line\fR arguments are the (free text) of the reply. Do
\&\fInot\fR include carriage returns at the end of each \f(CW$line\fR.
This function adds the correct line ending format as specified
in the \s-1RFC.\s0
.ie n .IP "$ftps\->log ($level, $message, ...);" 4
.el .IP "\f(CW$ftps\fR\->log ($level, \f(CW$message\fR, ...);" 4
.IX Item "$ftps->log ($level, $message, ...);"
This function is identical to the normal \f(CW\*(C`syslog\*(C'\fR function
to be found in \f(CW\*(C`Sys::Syslog\*(C'\fR. However, it only uses syslog
if the \f(CW\*(C`enable syslog\*(C'\fR configuration option is set to true.
.Sp
Use this function instead of calling \f(CW\*(C`syslog\*(C'\fR directly.
.ie n .IP "$ftps\->config ($name);" 4
.el .IP "\f(CW$ftps\fR\->config ($name);" 4
.IX Item "$ftps->config ($name);"
Read configuration option \f(CW$name\fR from the configuration file.
.ie n .IP "$ftps\->ip_host_config ($ip_addr);" 4
.el .IP "\f(CW$ftps\fR\->ip_host_config ($ip_addr);" 4
.IX Item "$ftps->ip_host_config ($ip_addr);"
Look for a <Host> section which contains \*(L"ip: \f(CW$ip_addr\fR\*(R".
If one is found, return the site name of the Host section. Otherwise
return undef.
.ie n .IP "$filter = $ftps\->archive_filter_external ($sock, $cmd [, $args]);" 4
.el .IP "\f(CW$filter\fR = \f(CW$ftps\fR\->archive_filter_external ($sock, \f(CW$cmd\fR [, \f(CW$args\fR]);" 4
.IX Item "$filter = $ftps->archive_filter_external ($sock, $cmd [, $args]);"
Apply \f(CW$cmd\fR as a filter to socket \f(CW$sock\fR. Returns a hash reference
which contains the following keys:
.Sp
.Vb 2
\&  sock      Newly opened socket.
\&  pid       PID of filter program.
.Ve
.Sp
If it fails, returns \f(CW\*(C`undef\*(C'\fR.
.Sp
See section \s-1ARCHIVE MODE\s0 elsewhere in this manual for more information.
.ie n .IP "$ftps\->visit ($dirh, \e%functions);" 4
.el .IP "\f(CW$ftps\fR\->visit ($dirh, \e%functions);" 4
.IX Item "$ftps->visit ($dirh, %functions);"
The \f(CW\*(C`visit\*(C'\fR function recursively \*(L"visits\*(R" every file and directory
contained in \f(CW$dirh\fR (which must be a directory handle).
.Sp
\&\f(CW\*(C`\e%functions\*(C'\fR is a reference to a hash of file types to functions.
For example:
.Sp
.Vb 4
\&  \*(Aqf\*(Aq => \e&visit_file,
\&  \*(Aqd\*(Aq => \e&visit_directory,
\&  \*(Aql\*(Aq => \e&visit_symlink,
\&  &c.
.Ve
.Sp
When a file of the known type is encountered, the appropriate
function is called with \f(CW$_\fR set to the file handle. (All functions
are optional: if \f(CW\*(C`visit\*(C'\fR encounters a file with a type not listed
in the \f(CW%functions\fR hash, then that file is just ignored).
.Sp
The return value from functions is ignored, \fIexcept\fR for the
return value from the directory ('d') function. The directory
function should return 1 to indicate that \f(CW\*(C`visit\*(C'\fR should recurse
into that directory. If the directory function returns 0, then
\&\f(CW\*(C`visit\*(C'\fR will skip that directory.
.Sp
\&\f(CW\*(C`visit\*(C'\fR will call the directory function once for \f(CW$dirh\fR.
.ie n .IP "$sock = $self\->open_data_connection;" 4
.el .IP "\f(CW$sock\fR = \f(CW$self\fR\->open_data_connection;" 4
.IX Item "$sock = $self->open_data_connection;"
Open a data connection. Returns the socket (an instance of \f(CW\*(C`IO::Socket\*(C'\fR) or undef if it fails for some reason.
.ie n .IP "$self\->pre_configuration_hook ();" 4
.el .IP "\f(CW$self\fR\->pre_configuration_hook ();" 4
.IX Item "$self->pre_configuration_hook ();"
Hook: Called before command line arguments and configuration file
are read.
.Sp
Status: optional.
.Sp
Notes: You may append your own information to \f(CW\*(C`$self\->{version_string}\*(C'\fR
from this hook.
.ie n .IP "$self\->options_hook (\e@args);" 4
.el .IP "\f(CW$self\fR\->options_hook (\e@args);" 4
.IX Item "$self->options_hook (@args);"
Hook: Called before command line arguments are parsed.
.Sp
Status: optional.
.Sp
Notes: You can use this hook to supply your own command line arguments.
If you parse any arguments, you should remove them from the \f(CW@args\fR
array.
.ie n .IP "$self\->post_configuration_hook ();" 4
.el .IP "\f(CW$self\fR\->post_configuration_hook ();" 4
.IX Item "$self->post_configuration_hook ();"
Hook: Called after all command line arguments and configuration file
have been read and parsed.
.Sp
Status: optional.
.ie n .IP "$self\->post_bind_hook ();" 4
.el .IP "\f(CW$self\fR\->post_bind_hook ();" 4
.IX Item "$self->post_bind_hook ();"
Hook: Called only in daemon mode after the control port is bound
but before starting the accept infinite loop block.
.Sp
Status: optional.
.ie n .IP "$self\->pre_accept_hook ();" 4
.el .IP "\f(CW$self\fR\->pre_accept_hook ();" 4
.IX Item "$self->pre_accept_hook ();"
Hook: Called in daemon mode only just before \f(CWaccept(2)\fR is called
in the parent \s-1FTP\s0 server process.
.Sp
Status: optional.
.ie n .IP "$self\->post_accept_hook ();" 4
.el .IP "\f(CW$self\fR\->post_accept_hook ();" 4
.IX Item "$self->post_accept_hook ();"
Hook: Called both in daemon mode and in inetd mode just after the
connection has been accepted. This is called in the child process.
.Sp
Status: optional.
.ie n .IP "$rv = $self\->access_control_hook;" 4
.el .IP "\f(CW$rv\fR = \f(CW$self\fR\->access_control_hook;" 4
.IX Item "$rv = $self->access_control_hook;"
Hook: Called after \f(CWaccept(2)\fR\-ing the connection to perform access
control. Detailed request information is contained in the \f(CW$self\fR
object.  If the function returns \-1 then the socket is immediately
closed and no \s-1FTP\s0 processing happens on it. If the function returns 0,
then normal access control is performed on the socket before \s-1FTP\s0
processing starts. If the function returns 1, then normal access
control is \fInot\fR performed on the socket and \s-1FTP\s0 processing begins
immediately.
.Sp
Status: optional.
.ie n .IP "$rv = $self\->process_limits_hook;" 4
.el .IP "\f(CW$rv\fR = \f(CW$self\fR\->process_limits_hook;" 4
.IX Item "$rv = $self->process_limits_hook;"
Hook: Called after \f(CWaccept(2)\fR\-ing the connection to perform
per-process limits (eg. by using the \fBsetrlimit\fR\|(2) system
call). Access control has already been performed and detailed
request information is contained in the \f(CW$self\fR object.
.Sp
If the function returns \-1 then the socket is immediately closed and
no \s-1FTP\s0 processing happens on it. If the function returns 0, then
normal per-process limits are applied before any \s-1FTP\s0 processing
starts. If the function returns 1, then normal per-process limits are
\&\fInot\fR performed and \s-1FTP\s0 processing begins immediately.
.Sp
Status: optional.
.ie n .IP "$rv = $self\->authentication_hook ($user, $pass, $user_is_anon)" 4
.el .IP "\f(CW$rv\fR = \f(CW$self\fR\->authentication_hook ($user, \f(CW$pass\fR, \f(CW$user_is_anon\fR)" 4
.IX Item "$rv = $self->authentication_hook ($user, $pass, $user_is_anon)"
Hook: Called to perform authentication. If the authentication
succeeds, this should return 0 (or any positive integer >= 0).
If the authentication fails, this should return \-1.
.Sp
Status: required.
.ie n .IP "$self\->user_login_hook ($user, $user_is_anon)" 4
.el .IP "\f(CW$self\fR\->user_login_hook ($user, \f(CW$user_is_anon\fR)" 4
.IX Item "$self->user_login_hook ($user, $user_is_anon)"
Hook: Called just after user \f(CW$user\fR has successfully logged in. A good
place to change uid and chroot if necessary.
.Sp
Status: optional.
.ie n .IP "$dirh = $self\->root_directory_hook;" 4
.el .IP "\f(CW$dirh\fR = \f(CW$self\fR\->root_directory_hook;" 4
.IX Item "$dirh = $self->root_directory_hook;"
Hook: Return an instance of a subclass of Net::FTPServer::DirHandle
corresponding to the root directory.
.Sp
Status: required.
.ie n .IP "$self\->pre_command_hook;" 4
.el .IP "\f(CW$self\fR\->pre_command_hook;" 4
.IX Item "$self->pre_command_hook;"
Hook: This hook is called just before the server begins to wait for
the client to issue the next command over the control connection.
.Sp
Status: optional.
.ie n .IP "$rv = $self\->command_filter_hook ($cmdline);" 4
.el .IP "\f(CW$rv\fR = \f(CW$self\fR\->command_filter_hook ($cmdline);" 4
.IX Item "$rv = $self->command_filter_hook ($cmdline);"
Hook: This hook is called immediately after the client issues
command \f(CW$cmdline\fR, but \fBbefore\fR any checking or processing
is performed on the command. If this function returns \-1, then
the server immediately goes back to waiting for the next
command. If this function returns 0, then normal command filtering
is carried out and the command is processed. If this function
returns 1 then normal command filtering is \fBnot\fR performed
and the command processing begins immediately.
.Sp
Important Note: This hook must be careful \fBnot\fR to overwrite
the global \f(CW$_\fR variable.
.Sp
Do not use this function to add your own commands. Instead
use the \f(CW\*(C`$self\->{command_table}\*(C'\fR and \f(CW\*(C`$self\->{site_command_table}\*(C'\fR
hashes.
.Sp
Status: optional.
.ie n .IP "$error = $self\->transfer_hook ($mode, $file, $sock, \e$buffer);" 4
.el .IP "\f(CW$error\fR = \f(CW$self\fR\->transfer_hook ($mode, \f(CW$file\fR, \f(CW$sock\fR, \e$buffer);" 4
.IX Item "$error = $self->transfer_hook ($mode, $file, $sock, $buffer);"
.Vb 4
\&  $mode     \-  Open mode on the File object (Either reading or writing)
\&  $file     \-  File object as returned from DirHandle::open
\&  $sock     \-  Data IO::Socket object used for transfering
\&  \e$buffer  \-  Reference to current buffer about to be written
.Ve
.Sp
The \e$buffer is passed by reference to minimize the stack overhead
for efficiency purposes only.  It is \fBnot\fR meant to be modified by
the transfer_hook subroutine.  (It can cause corruption if the
length of \f(CW$buffer\fR is modified.)
.Sp
Hook: This hook is called after reading \f(CW$buffer\fR and before writing
\&\f(CW$buffer\fR to its destination.  If arg1 is \*(L"r\*(R", \f(CW$buffer\fR was read
from the File object and written to the Data socket.  If arg1 is
\&\*(L"w\*(R", \f(CW$buffer\fR will be written to the File object because it was
read from the Data Socket.  The return value is the error for not
being able to perform the write.  Return undef to avoid aborting
the transfer process.
.Sp
Status: optional.
.ie n .IP "$self\->post_command_hook ($cmd, $rest)" 4
.el .IP "\f(CW$self\fR\->post_command_hook ($cmd, \f(CW$rest\fR)" 4
.IX Item "$self->post_command_hook ($cmd, $rest)"
Hook: This hook is called after all command processing has been
carried out on this command. \f(CW$cmd\fR is the command, and
\&\f(CW$rest\fR is the remainder of the command line.
.Sp
Status: optional.
.ie n .IP "$self\->system_error_hook" 4
.el .IP "\f(CW$self\fR\->system_error_hook" 4
.IX Item "$self->system_error_hook"
Hook: This hook is used instead of $! when what looks like a system error
occurs during a virtual filesystem handle method.  It can be used by the
virtual filesystem to provide explanatory text for a virtual filesystem
failure which did not actually set the real $!.
.Sp
Status: optional.
.ie n .IP "$self\->quit_hook" 4
.el .IP "\f(CW$self\fR\->quit_hook" 4
.IX Item "$self->quit_hook"
Hook: This hook is called after the user has \f(CW\*(C`QUIT\*(C'\fR or if the \s-1FTP\s0
client cleanly drops the connection. Please note, however, that this
hook is \fInot\fR called whenever the \s-1FTP\s0 server exits, particularly in
cases such as:
.Sp
.Vb 8
\& * The FTP server, the Perl interpreter or the personality
\&   crashes unexpectedly.
\& * The user fails to log in.
\& * The FTP server detects a fatal error, sends a "421" error code,
\&   and abruptly exits.
\& * Idle timeouts.
\& * Access control violations.
\& * Manual server shutdowns.
.Ve
.Sp
Unfortunately it is not in general easily possible to catch these
cases and cleanly call a hook. If your personality needs to do cleanup
in all cases, then it is probably better to use an \f(CW\*(C`END\*(C'\fR block inside
your Server object (see \f(CWperlmod(3)\fR). Even using an \f(CW\*(C`END\*(C'\fR block
cannot catch cases where the Perl interpreter crashes.
.Sp
Status: optional.
.SH "BUGS"
.IX Header "BUGS"
The \s-1SIZE, REST\s0 and \s-1RETR\s0 commands probably do not work correctly
in \s-1ASCII\s0 mode.
.PP
\&\s-1REST\s0 does not work before \s-1STOR/STOU/APPE\s0 (is it supposed to?)
.PP
User upload/download limits.
.PP
Limit number of clients by host or \s-1IP\s0 address.
.PP
The following commands are recognized by \f(CW\*(C`wu\-ftpd\*(C'\fR, but are not yet
implemented by \f(CW\*(C`Net::FTPServer\*(C'\fR:
.PP
.Vb 8
\&  SITE CHMOD   There is a problem supporting this with our VFS.
\&  SITE GPASS   Group functions are not really relevant for us.
\&  SITE GROUP   \-"\- ditto \-"\-
\&  SITE GROUPS  \-"\- ditto \-"\-
\&  SITE INDEX   This is a synonym for SITE EXEC.
\&  SITE MINFO   This command is no longer supported by wu\-ftpd.
\&  SITE NEWER   This command is no longer supported by wu\-ftpd.
\&  SITE UMASK   This command is difficult to support with VFS.
.Ve
.PP
Symbolic links are not handled elegantly (or indeed at all) yet.
.PP
Equivalent of ProFTPD's ``DisplayReadme'' function.
.PP
The ability to hide dot files (probably best to build this
into the \s-1VFS\s0 layer). This should apply across all commands.
See ProFTPD's ``IgnoreHidden'' function.
.PP
Access to \s-1LDAP\s0 authentication database (can currently be done using a
\&\s-1PAM\s0 module). In general, we should support pluggable authentication.
.PP
Log formatting similar to ProFTPD command LogFormat.
.PP
More timeouts to avoid various denial of service attacks. For example,
the server should always timeout when waiting too long for an
active data connection.
.PP
Support for IPv6 (see \s-1RFC 2428\s0), \s-1EPRT, EPSV\s0 commands.
.PP
See also \*(L"\s-1XXX\*(R"\s0 comments in the code for other problems, missing features
and bugs.
.SH "DEPENDENCY"
.IX Header "DEPENDENCY"
IO::Dir, IO::stringy
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Jones (rich@annexia.org),
Rob Brown (bbb@cpan.org),
Keith Turner (keitht at silvaco.com),
Azazel (azazel at azazel.net),
and many others.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Ryo Okamoto \f(CW\*(C`<ryo at aquahill dot net>\*(C'\fR
.SH "REPOSITORY"
.IX Header "REPOSITORY"
https://github.com/ryochin/p5\-net\-ftpserver
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2000 Biblio@Tech Ltd., Unit 2\-3, 50 Carnwath Road,
London, \s-1SW6 3EG, UK.\s0
.PP
Copyright (C) 2000\-2003 Richard Jones (rich@annexia.org) and
other contributors.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWNet::FTPServer::Handle(3)\fR,
\&\f(CWNet::FTPServer::FileHandle(3)\fR,
\&\f(CWNet::FTPServer::DirHandle(3)\fR,
\&\f(CWNet::FTP(3)\fR,
\&\f(CWperl(1)\fR,
\&\s-1RFC 765,
RFC 959,
RFC 1579,
RFC 2389,
RFC 2428,
RFC 2577,
RFC 2640,\s0
Extensions to \s-1FTP\s0 Internet Draft draft\-ietf\-ftpext\-mlst\-NN.txt.
Net::FTPServer::XferLog
Test::FTP::Server
