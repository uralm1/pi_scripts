.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::FTPServer::Handle 3pm"
.TH Net::FTPServer::Handle 3pm "2012-11-12" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::FTPServer::Handle \- A generic Net::FTPServer file or directory handle.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::FTPServer::Handle;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$handle = Net::FTPServer::Handle\->new ($ftps);" 4
.el .IP "\f(CW$handle\fR = Net::FTPServer::Handle\->new ($ftps);" 4
.IX Item "$handle = Net::FTPServer::Handle->new ($ftps);"
Create a new handle. You would normally call this from
a derived class.
.ie n .IP "$rv = $handle\->equals ($other_handle);" 4
.el .IP "\f(CW$rv\fR = \f(CW$handle\fR\->equals ($other_handle);" 4
.IX Item "$rv = $handle->equals ($other_handle);"
Decide if two handles refer to the same thing (file or directory).
.ie n .IP "($mode, $perms, $nlink, $user, $group, $size, $time) = $handle\->status;" 4
.el .IP "($mode, \f(CW$perms\fR, \f(CW$nlink\fR, \f(CW$user\fR, \f(CW$group\fR, \f(CW$size\fR, \f(CW$time\fR) = \f(CW$handle\fR\->status;" 4
.IX Item "($mode, $perms, $nlink, $user, $group, $size, $time) = $handle->status;"
Return the file or directory status. The fields returned are:
.Sp
.Vb 10
\&  $mode     Mode        \*(Aqd\*(Aq = directory,
\&                        \*(Aqf\*(Aq = file,
\&                        and others as with
\&                        the find(1) \-type option.
\&  $perms    Permissions Permissions in normal octal numeric format.
\&  $nlink    Link count
\&  $user     Username    In printable format.
\&  $group    Group name  In printable format.
\&  $size     Size        File size in bytes.
\&  $time     Time        Time (usually mtime) in Unix time_t format.
.Ve
.Sp
In derived classes, some of this status information may well be
synthesized, since virtual filesystems will often not contain
information in a Unix-like format.
.ie n .IP "$name = $handle\->pathname;" 4
.el .IP "\f(CW$name\fR = \f(CW$handle\fR\->pathname;" 4
.IX Item "$name = $handle->pathname;"
Return the full path of this file or directory. The path consists of
all components separated by \*(L"/\*(R" characters.
.Sp
If the object is a directory, then the pathname will have
a \*(L"/\*(R" character at the end.
.ie n .IP "$name = $handle\->filename;" 4
.el .IP "\f(CW$name\fR = \f(CW$handle\fR\->filename;" 4
.IX Item "$name = $handle->filename;"
Return the filename part of the path. If the file is a directory,
then this function returns "".
.ie n .IP "$name = $handle\->dirname;" 4
.el .IP "\f(CW$name\fR = \f(CW$handle\fR\->dirname;" 4
.IX Item "$name = $handle->dirname;"
Return the directory name part of the path. The directory name
always has a trailing \*(L"/\*(R" character.
.ie n .IP "$rv = $handle\->move ($dirh, $filename);" 4
.el .IP "\f(CW$rv\fR = \f(CW$handle\fR\->move ($dirh, \f(CW$filename\fR);" 4
.IX Item "$rv = $handle->move ($dirh, $filename);"
Move the current file (or directory) into directory \f(CW$dirh\fR and
call it \f(CW$filename\fR. If the operation is successful, return 0,
else return \-1.
.Sp
Underlying filesystems may impose limitations on moves: for example,
it may not be possible to move a directory; it may not be possible
to move a file to another directory; it may not be possible to
move a file across filesystems.
.ie n .IP "$rv = $handle\->delete;" 4
.el .IP "\f(CW$rv\fR = \f(CW$handle\fR\->delete;" 4
.IX Item "$rv = $handle->delete;"
Delete the current file or directory. If the delete command was
successful, then return 0, else if there was an error return \-1.
.Sp
Different underlying file systems may impose restrictions on
this command: for example, it may not be possible to delete
directories, or only if they are empty.
.Sp
This is a virtual function which is actually implemented in
one of the subclasses.
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Jones (rich@annexia.org).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000 Biblio@Tech Ltd., Unit 2\-3, 50 Carnwath Road,
London, \s-1SW6 3EG, UK\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWNet::FTPServer(3)\fR, \f(CWperl(1)\fR
